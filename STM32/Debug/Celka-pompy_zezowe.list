
Celka-pompy_zezowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f0  080058f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f8  080058f8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004608  20000014  08005914  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000461c  08005914  0002461c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001698a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003523  00000000  00000000  000369ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  0003b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002425f  00000000  00000000  0003c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125fc  00000000  00000000  00060557  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7788  00000000  00000000  00072b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a2db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ccc  00000000  00000000  0014a358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800582c 	.word	0x0800582c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	0800582c 	.word	0x0800582c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000030 	.word	0x20000030
 8000540:	20000084 	.word	0x20000084

08000544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b098      	sub	sp, #96	; 0x60
 8000548:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of decoder_sem */
  osSemaphoreDef(decoder_sem);
 800054a:	2300      	movs	r3, #0
 800054c:	65bb      	str	r3, [r7, #88]	; 0x58
 800054e:	2300      	movs	r3, #0
 8000550:	65fb      	str	r3, [r7, #92]	; 0x5c
  decoder_semHandle = osSemaphoreCreate(osSemaphore(decoder_sem), 1);
 8000552:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fd44 	bl	8002fe6 <osSemaphoreCreate>
 800055e:	4602      	mov	r2, r0
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_FREERTOS_Init+0x98>)
 8000562:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <MX_FREERTOS_Init+0x9c>)
 8000566:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fcd1 	bl	8002f26 <osThreadCreate>
 8000584:	4602      	mov	r2, r0
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_FREERTOS_Init+0xa0>)
 8000588:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskComm */
  osThreadDef(TaskComm, StartTaskCommunication, osPriorityNormal, 0, 256);
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_FREERTOS_Init+0xa4>)
 800058c:	f107 0420 	add.w	r4, r7, #32
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCommHandle = osThreadCreate(osThread(TaskComm), NULL);
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fcbe 	bl	8002f26 <osThreadCreate>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_FREERTOS_Init+0xa8>)
 80005ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_bilge_pump */
  osThreadDef(task_bilge_pump, Start_Task_PumpControl, osPriorityNormal, 0, 256);
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_FREERTOS_Init+0xac>)
 80005b2:	1d3c      	adds	r4, r7, #4
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_bilge_pumpHandle = osThreadCreate(osThread(task_bilge_pump), NULL);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fcad 	bl	8002f26 <osThreadCreate>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_FREERTOS_Init+0xb0>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005d2:	bf00      	nop
 80005d4:	3760      	adds	r7, #96	; 0x60
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bdb0      	pop	{r4, r5, r7, pc}
 80005da:	bf00      	nop
 80005dc:	20003ff4 	.word	0x20003ff4
 80005e0:	08005850 	.word	0x08005850
 80005e4:	20003fec 	.word	0x20003fec
 80005e8:	08005878 	.word	0x08005878
 80005ec:	20003fe8 	.word	0x20003fe8
 80005f0:	080058a4 	.word	0x080058a4
 80005f4:	20003ff0 	.word	0x20003ff0

080005f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f002 fcdc 	bl	8002fbe <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartDefaultTask+0x8>

08000608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a26      	ldr	r2, [pc, #152]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_GPIO_Init+0xd4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_GPIO_Init+0xd4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a18      	ldr	r2, [pc, #96]	; (80006dc <MX_GPIO_Init+0xd4>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ENABLE_2_Pin|ENABLE_1_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_GPIO_Init+0xd8>)
 8000696:	f001 f89d 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_GPIO_Init+0xdc>)
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_GPIO_Init+0xe0>)
 80006b0:	f000 fefe 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ENABLE_2_Pin|ENABLE_1_Pin;
 80006b4:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0xd8>)
 80006ce:	f000 feef 	bl	80014b0 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	10210000 	.word	0x10210000
 80006e8:	40020800 	.word	0x40020800

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fdba 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f80a 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff86 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 fd10 	bl	8001120 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000700:	f7ff ff20 	bl	8000544 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000704:	f002 fbf8 	bl	8002ef8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x1c>
	...

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f87d 	bl	800581a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <SystemClock_Config+0xd4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <SystemClock_Config+0xd4>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <SystemClock_Config+0xd8>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000780:	2310      	movs	r3, #16
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000784:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078a:	2304      	movs	r3, #4
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fb20 	bl	8001de0 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007a6:	f000 f831 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f81e 	bl	8001808 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007d2:	f000 f81b 	bl	800080c <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 fd57 	bl	80012ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40001000 	.word	0x40001000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <decoderText>:
		//packetBuff[packet_i++] = *data++;
    	//uart_put_char here
	}
}

__weak void decoderText(uint8_t chr) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	//override this function to get text unknown by decoder char by char
	// print char
	volatile static uint8_t j=0;
	j++;
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <decoderText+0x24>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3301      	adds	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <decoderText+0x24>)
 8000832:	701a      	strb	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	2000028c 	.word	0x2000028c

08000844 <crcReset>:
	i++;
}

//https://en.wikipedia.org/wiki/Fletcher%27s_checksum
volatile uint32_t c0, c1;
void crcReset() {
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	c0 = 0x12; //just random small nonzero seed value
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <crcReset+0x1c>)
 800084a:	2212      	movs	r2, #18
 800084c:	601a      	str	r2, [r3, #0]
	c1 = 0x34;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <crcReset+0x20>)
 8000850:	2234      	movs	r2, #52	; 0x34
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200043fc 	.word	0x200043fc
 8000864:	200043f8 	.word	0x200043f8

08000868 <crcCompute>:

void crcCompute(uint8_t data) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	//fletcher16(const uint8_t *data, size_t len) from wikipedia
	//this work up to 5000 bytes. Above just call somewhere crcGet to calculate modulo.
	//Detalis here: https://en.wikipedia.org/wiki/Fletcher%27s_checksum
	c0 = c0 + data;
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <crcCompute+0x30>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <crcCompute+0x30>)
 800087c:	6013      	str	r3, [r2, #0]
	c1 = c1 + c0;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <crcCompute+0x34>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <crcCompute+0x30>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <crcCompute+0x34>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	200043fc 	.word	0x200043fc
 800089c:	200043f8 	.word	0x200043f8

080008a0 <crcGet>:

void crcGet(uint8_t *crc, uint8_t len) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	while (len < 2) {
 80008ac:	e002      	b.n	80008b4 <crcGet+0x14>
		len++;//configuration error
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	3301      	adds	r3, #1
 80008b2:	70fb      	strb	r3, [r7, #3]
	while (len < 2) {
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d9f9      	bls.n	80008ae <crcGet+0xe>
	}
	c0 = c0 % 255;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <crcGet+0x6c>)
 80008bc:	6819      	ldr	r1, [r3, #0]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <crcGet+0x70>)
 80008c0:	fba3 2301 	umull	r2, r3, r3, r1
 80008c4:	09da      	lsrs	r2, r3, #7
 80008c6:	4613      	mov	r3, r2
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	1aca      	subs	r2, r1, r3
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <crcGet+0x6c>)
 80008d0:	601a      	str	r2, [r3, #0]
	c1 = c1 % 255;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <crcGet+0x74>)
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <crcGet+0x70>)
 80008d8:	fba3 2301 	umull	r2, r3, r3, r1
 80008dc:	09da      	lsrs	r2, r3, #7
 80008de:	4613      	mov	r3, r2
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	1a9b      	subs	r3, r3, r2
 80008e4:	1aca      	subs	r2, r1, r3
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <crcGet+0x74>)
 80008e8:	601a      	str	r2, [r3, #0]
	crc[0] = c0;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <crcGet+0x6c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	701a      	strb	r2, [r3, #0]
	crc[1] = c1;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <crcGet+0x74>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	200043fc 	.word	0x200043fc
 8000910:	80808081 	.word	0x80808081
 8000914:	200043f8 	.word	0x200043f8

08000918 <crctest>:

bool crctest(uint8_t *crc, uint8_t len) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	uint8_t crcComputed[CRC_SIZE];
	crcGet(crcComputed, len);
 8000924:	78fa      	ldrb	r2, [r7, #3]
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffb7 	bl	80008a0 <crcGet>
	if (memcmp(crc, crcComputed, len) == 0) {
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f004 ff3a 	bl	80057b4 <memcmp>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <crctest+0x32>
		return true;
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <crctest+0x34>
	} else {
		return false;
 800094a:	2300      	movs	r3, #0
	}
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <decoderPut>:
	m_decoderNextState = INIT;
}

volatile uint32_t decoded = 0;

void decoderPut(uint8_t chr) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b087      	sub	sp, #28
 8000958:	af02      	add	r7, sp, #8
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	static uint8_t crcReceived[CRC_SIZE];
	static uint8_t headerArr[sizeof(START_OF_PACKET)];
	static uint8_t command;
	static uint8_t dataLen;
	static uint8_t dataPtr;
	const size_t headerSize = sizeof(START_OF_PACKET) - 1;
 800095e:	2301      	movs	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]

	switch (m_decoderNextState) {
 8000962:	4b74      	ldr	r3, [pc, #464]	; (8000b34 <decoderPut+0x1e0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b06      	cmp	r3, #6
 8000968:	f200 80da 	bhi.w	8000b20 <decoderPut+0x1cc>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <decoderPut+0x20>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000991 	.word	0x08000991
 8000978:	080009a9 	.word	0x080009a9
 800097c:	080009f9 	.word	0x080009f9
 8000980:	08000a11 	.word	0x08000a11
 8000984:	08000a25 	.word	0x08000a25
 8000988:	08000a71 	.word	0x08000a71
 800098c:	08000abd 	.word	0x08000abd
	case INIT:
		headerArr[0] = 0;
 8000990:	4b69      	ldr	r3, [pc, #420]	; (8000b38 <decoderPut+0x1e4>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
		dataPtr = 0;
 8000996:	4b69      	ldr	r3, [pc, #420]	; (8000b3c <decoderPut+0x1e8>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
		crcReceived[0] = 1;
 800099c:	4b68      	ldr	r3, [pc, #416]	; (8000b40 <decoderPut+0x1ec>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
		crcReceived[1] = 2;
 80009a2:	4b67      	ldr	r3, [pc, #412]	; (8000b40 <decoderPut+0x1ec>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	705a      	strb	r2, [r3, #1]

		//go to header
	case HEADER:
		if (dataPtr < sizeof(START_OF_PACKET)) {
 80009a8:	4b64      	ldr	r3, [pc, #400]	; (8000b3c <decoderPut+0x1e8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d806      	bhi.n	80009be <decoderPut+0x6a>
			dataPtr++; // wait for fill buffer, print only if buff is full and not match start sequence
 80009b0:	4b62      	ldr	r3, [pc, #392]	; (8000b3c <decoderPut+0x1e8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b60      	ldr	r3, [pc, #384]	; (8000b3c <decoderPut+0x1e8>)
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e004      	b.n	80009c8 <decoderPut+0x74>
		} else {
			decoderText(headerArr[0]);
 80009be:	4b5e      	ldr	r3, [pc, #376]	; (8000b38 <decoderPut+0x1e4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff2a 	bl	800081c <decoderText>
		}
		memmove(&headerArr[0], &headerArr[1], headerSize); //shift left by 1 byte
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	495e      	ldr	r1, [pc, #376]	; (8000b44 <decoderPut+0x1f0>)
 80009cc:	485a      	ldr	r0, [pc, #360]	; (8000b38 <decoderPut+0x1e4>)
 80009ce:	f004 ff0b 	bl	80057e8 <memmove>
		headerArr[sizeof(START_OF_PACKET) - 1] = chr;
 80009d2:	4a59      	ldr	r2, [pc, #356]	; (8000b38 <decoderPut+0x1e4>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	7053      	strb	r3, [r2, #1]
		if (memcmp(headerArr, START_OF_PACKET, sizeof(START_OF_PACKET)) == 0) {
 80009d8:	2202      	movs	r2, #2
 80009da:	495b      	ldr	r1, [pc, #364]	; (8000b48 <decoderPut+0x1f4>)
 80009dc:	4856      	ldr	r0, [pc, #344]	; (8000b38 <decoderPut+0x1e4>)
 80009de:	f004 fee9 	bl	80057b4 <memcmp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d103      	bne.n	80009f0 <decoderPut+0x9c>
			m_decoderNextState = COMMAND;
 80009e8:	4b52      	ldr	r3, [pc, #328]	; (8000b34 <decoderPut+0x1e0>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	701a      	strb	r2, [r3, #0]
		} else {
			m_decoderNextState = HEADER;
		}
		break;
 80009ee:	e09c      	b.n	8000b2a <decoderPut+0x1d6>
			m_decoderNextState = HEADER;
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <decoderPut+0x1e0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
		break;
 80009f6:	e098      	b.n	8000b2a <decoderPut+0x1d6>

	case COMMAND:
		decoded++;
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <decoderPut+0x1f8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <decoderPut+0x1f8>)
 8000a00:	6013      	str	r3, [r2, #0]
		command = chr;
 8000a02:	4a53      	ldr	r2, [pc, #332]	; (8000b50 <decoderPut+0x1fc>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	7013      	strb	r3, [r2, #0]
		m_decoderNextState = DATA_LEN;
 8000a08:	4b4a      	ldr	r3, [pc, #296]	; (8000b34 <decoderPut+0x1e0>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	701a      	strb	r2, [r3, #0]
		break;
 8000a0e:	e08c      	b.n	8000b2a <decoderPut+0x1d6>

	case DATA_LEN:
		dataLen = chr;
 8000a10:	4a50      	ldr	r2, [pc, #320]	; (8000b54 <decoderPut+0x200>)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	7013      	strb	r3, [r2, #0]
		m_decoderNextState = CRC_STATE;
 8000a16:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <decoderPut+0x1e0>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	701a      	strb	r2, [r3, #0]
		dataPtr = 0;
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <decoderPut+0x1e8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		break;
 8000a22:	e082      	b.n	8000b2a <decoderPut+0x1d6>

	case CRC_STATE:
		crcReceived[dataPtr] = chr;
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <decoderPut+0x1e8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4a45      	ldr	r2, [pc, #276]	; (8000b40 <decoderPut+0x1ec>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	5453      	strb	r3, [r2, r1]
		dataPtr++;
 8000a30:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <decoderPut+0x1e8>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <decoderPut+0x1e8>)
 8000a3a:	701a      	strb	r2, [r3, #0]
		m_decoderNextState = CRC_STATE;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <decoderPut+0x1e0>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	701a      	strb	r2, [r3, #0]
		if (dataPtr >= CRC_SIZE) {
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <decoderPut+0x1e8>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d96e      	bls.n	8000b28 <decoderPut+0x1d4>
			crcReset();
 8000a4a:	f7ff fefb 	bl	8000844 <crcReset>
			crcCompute(command);
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <decoderPut+0x1fc>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff08 	bl	8000868 <crcCompute>
			crcCompute(dataLen);
 8000a58:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <decoderPut+0x200>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff03 	bl	8000868 <crcCompute>
			dataPtr = 0;
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <decoderPut+0x1e8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
			m_decoderNextState = DATA_FIELD;
 8000a68:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <decoderPut+0x1e0>)
 8000a6a:	2205      	movs	r2, #5
 8000a6c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a6e:	e05b      	b.n	8000b28 <decoderPut+0x1d4>

	case DATA_FIELD:
		if (dataPtr < dataLen -1) {
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <decoderPut+0x1e8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <decoderPut+0x200>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	da03      	bge.n	8000a88 <decoderPut+0x134>
			m_decoderNextState = DATA_FIELD;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <decoderPut+0x1e0>)
 8000a82:	2205      	movs	r2, #5
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e002      	b.n	8000a8e <decoderPut+0x13a>
		} else {
			m_decoderNextState = END0;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <decoderPut+0x1e0>)
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	701a      	strb	r2, [r3, #0]
		}
		decoderData(command, dataLen, dataPtr, chr, PACKET_READING);
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <decoderPut+0x1fc>)
 8000a90:	7818      	ldrb	r0, [r3, #0]
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <decoderPut+0x200>)
 8000a94:	7819      	ldrb	r1, [r3, #0]
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <decoderPut+0x1e8>)
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	79fc      	ldrb	r4, [r7, #7]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	4623      	mov	r3, r4
 8000aa2:	f000 f94b 	bl	8000d3c <decoderData>
		crcCompute(chr);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fedd 	bl	8000868 <crcCompute>
		dataPtr++;
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <decoderPut+0x1e8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <decoderPut+0x1e8>)
 8000ab8:	701a      	strb	r2, [r3, #0]
		break;
 8000aba:	e036      	b.n	8000b2a <decoderPut+0x1d6>

	case END0:
		if (chr == END_OF_PACKET) {
 8000abc:	22ed      	movs	r2, #237	; 0xed
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d11e      	bne.n	8000b02 <decoderPut+0x1ae>
			if (crctest(crcReceived, CRC_SIZE)) {
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	481e      	ldr	r0, [pc, #120]	; (8000b40 <decoderPut+0x1ec>)
 8000ac8:	f7ff ff26 	bl	8000918 <crctest>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <decoderPut+0x196>
				decoderData(command, dataLen, dataPtr, 0, PACKET_OK);
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <decoderPut+0x1fc>)
 8000ad4:	7818      	ldrb	r0, [r3, #0]
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <decoderPut+0x200>)
 8000ad8:	7819      	ldrb	r1, [r3, #0]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <decoderPut+0x1e8>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f000 f92a 	bl	8000d3c <decoderData>
 8000ae8:	e016      	b.n	8000b18 <decoderPut+0x1c4>
			} else {
				decoderData(command, dataLen, dataPtr, 0, PACKET_CRCFAIL);
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <decoderPut+0x1fc>)
 8000aec:	7818      	ldrb	r0, [r3, #0]
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <decoderPut+0x200>)
 8000af0:	7819      	ldrb	r1, [r3, #0]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <decoderPut+0x1e8>)
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	2302      	movs	r3, #2
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	f000 f91e 	bl	8000d3c <decoderData>
 8000b00:	e00a      	b.n	8000b18 <decoderPut+0x1c4>
			}
		} else {
			decoderData(command, dataLen, dataPtr, 0, PACKET_END_CRCFAIL);
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <decoderPut+0x1fc>)
 8000b04:	7818      	ldrb	r0, [r3, #0]
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <decoderPut+0x200>)
 8000b08:	7819      	ldrb	r1, [r3, #0]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <decoderPut+0x1e8>)
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	2303      	movs	r3, #3
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2300      	movs	r3, #0
 8000b14:	f000 f912 	bl	8000d3c <decoderData>
		}
		m_decoderNextState = INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <decoderPut+0x1e0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		break;
 8000b1e:	e004      	b.n	8000b2a <decoderPut+0x1d6>

	default:
		m_decoderNextState = INIT;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <decoderPut+0x1e0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		break;
 8000b26:	e000      	b.n	8000b2a <decoderPut+0x1d6>
		break;
 8000b28:	bf00      	nop
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000284 	.word	0x20000284
 8000b38:	20000290 	.word	0x20000290
 8000b3c:	20000292 	.word	0x20000292
 8000b40:	20000294 	.word	0x20000294
 8000b44:	20000291 	.word	0x20000291
 8000b48:	080058c8 	.word	0x080058c8
 8000b4c:	20000288 	.word	0x20000288
 8000b50:	20000296 	.word	0x20000296
 8000b54:	20000297 	.word	0x20000297

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_MspInit+0x54>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_MspInit+0x54>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x54>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_MspInit+0x54>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_MspInit+0x54>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x54>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	f06f 0001 	mvn.w	r0, #1
 8000b9e:	f000 fc5d 	bl	800145c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2036      	movs	r0, #54	; 0x36
 8000bc6:	f000 fc49 	bl	800145c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000bca:	2036      	movs	r0, #54	; 0x36
 8000bcc:	f000 fc62 	bl	8001494 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_InitTick+0xa4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <HAL_InitTick+0xa4>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_InitTick+0xa4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bec:	f107 0210 	add.w	r2, r7, #16
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 ff20 	bl	8001a3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bfc:	f000 fef6 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8000c00:	4603      	mov	r3, r0
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_InitTick+0xa8>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3b01      	subs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_InitTick+0xac>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HAL_InitTick+0xb0>)
 8000c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_InitTick+0xac>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_InitTick+0xac>)
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_InitTick+0xac>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_InitTick+0xac>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_InitTick+0xac>)
 8000c36:	f001 fb2d 	bl	8002294 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_InitTick+0xac>)
 8000c42:	f001 fb5c 	bl	80022fe <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20004400 	.word	0x20004400
 8000c60:	40001000 	.word	0x40001000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uart_interrupt_isr();
 8000c9c:	f000 fa02 	bl	80010a4 <uart_interrupt_isr>
	return;
 8000ca0:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM6_DAC_IRQHandler+0x10>)
 8000caa:	f001 fb4c 	bl	8002346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20004400 	.word	0x20004400

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <SystemInit+0x28>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <SystemInit+0x28>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SystemInit+0x28>)
 8000cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <uartRxClb>:
uint8_t rawData[99];
uint8_t rawDataPtr=0;
extern volatile SBT_e_pump_mode g_pump_mode;

void uartRxClb(uint8_t data)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	decoderPut(data);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe2f 	bl	8000954 <decoderPut>
	rawData[rawDataPtr]=data;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <uartRxClb+0x4c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <uartRxClb+0x50>)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	5453      	strb	r3, [r2, r1]
	rawDataPtr= (rawDataPtr+1)%99;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <uartRxClb+0x4c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <uartRxClb+0x54>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	4413      	add	r3, r2
 8000d10:	1199      	asrs	r1, r3, #6
 8000d12:	17d3      	asrs	r3, r2, #31
 8000d14:	1ac9      	subs	r1, r1, r3
 8000d16:	460b      	mov	r3, r1
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	440b      	add	r3, r1
 8000d1c:	0159      	lsls	r1, r3, #5
 8000d1e:	440b      	add	r3, r1
 8000d20:	1ad1      	subs	r1, r2, r3
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <uartRxClb+0x4c>)
 8000d26:	701a      	strb	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000298 	.word	0x20000298
 8000d34:	20004554 	.word	0x20004554
 8000d38:	a57eb503 	.word	0xa57eb503

08000d3c <decoderData>:
{
	uart_send_msg(data, len, 100);
}

void decoderData(uint8_t command, uint8_t dataLen, uint8_t dataPtr, uint8_t data, PACKET_STATUS_ET status)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71bb      	strb	r3, [r7, #6]
 8000d52:	460b      	mov	r3, r1
 8000d54:	717b      	strb	r3, [r7, #5]
 8000d56:	4613      	mov	r3, r2
 8000d58:	713b      	strb	r3, [r7, #4]
//this run from isr and put one char at time
	ParseBuffer[dataPtr] = data;
 8000d5a:	797b      	ldrb	r3, [r7, #5]
 8000d5c:	491b      	ldr	r1, [pc, #108]	; (8000dcc <decoderData+0x90>)
 8000d5e:	793a      	ldrb	r2, [r7, #4]
 8000d60:	54ca      	strb	r2, [r1, r3]

	if (dataLen == dataPtr)
 8000d62:	79ba      	ldrb	r2, [r7, #6]
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d12d      	bne.n	8000dc6 <decoderData+0x8a>
	{

		if (status == PACKET_OK)
 8000d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d129      	bne.n	8000dc6 <decoderData+0x8a>
		{
			if (command == PUMP_ID) //process start
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b06      	cmp	r3, #6
 8000d76:	d11b      	bne.n	8000db0 <decoderData+0x74>
			{
				SBT_s_pump_state_input *pumpPacket;
				pumpPacket = osMailAlloc(mail, osWaitForever);
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <decoderData+0x94>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fac8 	bl	8003316 <osMailAlloc>
 8000d86:	60f8      	str	r0, [r7, #12]

				if( pumpPacket == NULL ) return;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d018      	beq.n	8000dc0 <decoderData+0x84>
				size_t bytes = sizeof(SBT_s_pump_state_input);
 8000d8e:	2308      	movs	r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
				if (dataLen != bytes)
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d114      	bne.n	8000dc4 <decoderData+0x88>
					return;
				memcpy(pumpPacket, ParseBuffer, bytes);
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	490b      	ldr	r1, [pc, #44]	; (8000dcc <decoderData+0x90>)
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f004 fd17 	bl	80057d2 <memcpy>
				osMailPut(mail, pumpPacket);
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <decoderData+0x94>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68f9      	ldr	r1, [r7, #12]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fac8 	bl	8003340 <osMailPut>
			}
			if (command == PUMP_MODE_ID)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b07      	cmp	r3, #7
 8000db4:	d107      	bne.n	8000dc6 <decoderData+0x8a>
			{
				g_pump_mode = ParseBuffer[0];
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <decoderData+0x90>)
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <decoderData+0x98>)
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e002      	b.n	8000dc6 <decoderData+0x8a>
				if( pumpPacket == NULL ) return;
 8000dc0:	bf00      	nop
 8000dc2:	e000      	b.n	8000dc6 <decoderData+0x8a>
					return;
 8000dc4:	bf00      	nop
			}
			*/
		}

	}
}
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20004450 	.word	0x20004450
 8000dd0:	20004448 	.word	0x20004448
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <StartTaskCommunication>:
uint32_t refreshed = 0;




void StartTaskCommunication(void const * argument){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]


	mail = osMailCreate(osMailQ(mail), NULL);
 8000de0:	2100      	movs	r1, #0
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <StartTaskCommunication+0x34>)
 8000de4:	f002 fa3f 	bl	8003266 <osMailCreate>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <StartTaskCommunication+0x38>)
 8000dec:	601a      	str	r2, [r3, #0]
	//osSemDecoder = osSemaphoreCreate(osSemaphore(osSemDecoder), 1);
	uart_interrupts_enable();
 8000dee:	f000 f97d 	bl	80010ec <uart_interrupts_enable>

	while(1){
		uint32_t PreviousWakeTime = osKernelSysTick();
 8000df2:	f002 f888 	bl	8002f06 <osKernelSysTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	60fb      	str	r3, [r7, #12]

		osDelayUntil(&PreviousWakeTime, TASK_COMMUNICATION_DELAY);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fb63 	bl	80034ce <osDelayUntil>
	while(1){
 8000e08:	e7f3      	b.n	8000df2 <StartTaskCommunication+0x1a>
 8000e0a:	bf00      	nop
 8000e0c:	080058e4 	.word	0x080058e4
 8000e10:	20004448 	.word	0x20004448

08000e14 <SBT_Pump_Controll>:
// Pump mode default set to AUTO_MODE
volatile SBT_e_pump_mode g_pump_mode = 2;  
extern osMailQId  mail;


int SBT_Pump_Controll(SBT_e_bilge_current_state current_state){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SBT_Bilge_Pump_Current_Analysis>:


int SBT_Bilge_Pump_Current_Analysis(int16_t bilge_current){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	if(bilge_current <= CURRENT_ZERO){
 8000e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dc01      	bgt.n	8000e42 <SBT_Bilge_Pump_Current_Analysis+0x16>
		return 0; // Current = 0
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e02b      	b.n	8000e9a <SBT_Bilge_Pump_Current_Analysis+0x6e>
	}
	else if(bilge_current >= CURRENT_NO_WATER && bilge_current < CURRENT_WATER_DETECTED){
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	2b63      	cmp	r3, #99	; 0x63
 8000e48:	dd06      	ble.n	8000e58 <SBT_Bilge_Pump_Current_Analysis+0x2c>
 8000e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e52:	da01      	bge.n	8000e58 <SBT_Bilge_Pump_Current_Analysis+0x2c>
		return 1; // Current = no water
 8000e54:	2301      	movs	r3, #1
 8000e56:	e020      	b.n	8000e9a <SBT_Bilge_Pump_Current_Analysis+0x6e>
	}
	else if(bilge_current >= CURRENT_WATER_SPLASH && bilge_current < CURRENT_WATER_DETECTED){
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e60:	db06      	blt.n	8000e70 <SBT_Bilge_Pump_Current_Analysis+0x44>
 8000e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e66:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e6a:	da01      	bge.n	8000e70 <SBT_Bilge_Pump_Current_Analysis+0x44>
		return 2; // Current = splash of water detected
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e014      	b.n	8000e9a <SBT_Bilge_Pump_Current_Analysis+0x6e>
	}
	else if(bilge_current >= CURRENT_WATER_DETECTED && bilge_current < CURRENT_OVER_CURRENT){
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e78:	db07      	blt.n	8000e8a <SBT_Bilge_Pump_Current_Analysis+0x5e>
 8000e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e82:	4293      	cmp	r3, r2
 8000e84:	dc01      	bgt.n	8000e8a <SBT_Bilge_Pump_Current_Analysis+0x5e>
		return 3; // Current = plenty of water detected
 8000e86:	2303      	movs	r3, #3
 8000e88:	e007      	b.n	8000e9a <SBT_Bilge_Pump_Current_Analysis+0x6e>
	}
	else if(bilge_current >= CURRENT_OVER_CURRENT){
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e92:	4293      	cmp	r3, r2
 8000e94:	dd01      	ble.n	8000e9a <SBT_Bilge_Pump_Current_Analysis+0x6e>
		return 4; // Current = Overcurrent
 8000e96:	2304      	movs	r3, #4
 8000e98:	e7ff      	b.n	8000e9a <SBT_Bilge_Pump_Current_Analysis+0x6e>
	}
	
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <SBT_System_Failure>:


void SBT_System_Failure(SBT_e_pump_alarm error_id){
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
	// SEND TO CAN
	// It gets flag about system's condition and fatal errors
	uint8_t msg[8];
	switch(error_id){
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d007      	beq.n	8000ec6 <SBT_System_Failure+0x20>
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d008      	beq.n	8000ecc <SBT_System_Failure+0x26>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d000      	beq.n	8000ec0 <SBT_System_Failure+0x1a>
		case TIMEOUT:{
			msg[0]= TIMEOUT;
            break;
		}
		default:
			return;
 8000ebe:	e008      	b.n	8000ed2 <SBT_System_Failure+0x2c>
			msg[0]= PUMP_BROKEN;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	723b      	strb	r3, [r7, #8]
			break;
 8000ec4:	e005      	b.n	8000ed2 <SBT_System_Failure+0x2c>
			msg[0]= PUMP_OVERCURRENT;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	723b      	strb	r3, [r7, #8]
            break;
 8000eca:	e002      	b.n	8000ed2 <SBT_System_Failure+0x2c>
			msg[0]= TIMEOUT;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	723b      	strb	r3, [r7, #8]
            break;
 8000ed0:	bf00      	nop


	}
	// SBT_Can_Send(COOLING_SYSTEM_ERRORS, msg, 1000);
}
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <Start_Task_PumpControl>:


void Start_Task_PumpControl(void const * argument){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	PUMP_STATE_INPUT_INIT(pump_msg);
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
	SBT_s_pump_state_input *p_msg_received = &pump_msg;
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
	PUMP_FATAL_ALARM_INIT(pump_fatal_alarm);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	753b      	strb	r3, [r7, #20]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	757b      	strb	r3, [r7, #21]
 8000efc:	2300      	movs	r3, #0
 8000efe:	75bb      	strb	r3, [r7, #22]
	SBT_e_bilge_current_state current_state = ZERO; // Set current to 0 on init
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	SBT_e_pump_auto_action pump_auto_action = PUMP_AUTO_OFF; // Turn pump off deafultly on automatic mode
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t loop_ctr = 0; // Counter for current analysis purpose
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	osEvent evt;


	while(1){
		// Get data from queue
		evt = osMailGet(mail, TASK_BILGE_PUMP_COMMUNICATION_DELAY);
 8000f12:	4b61      	ldr	r3, [pc, #388]	; (8001098 <Start_Task_PumpControl+0x1bc>)
 8000f14:	6819      	ldr	r1, [r3, #0]
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fa4c 	bl	80033bc <osMailGet>

		if(evt.status == osEventMail){
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b20      	cmp	r3, #32
 8000f28:	d109      	bne.n	8000f3e <Start_Task_PumpControl+0x62>
			p_msg_received = evt.value.p; // Process values update when available
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
			if(pump_auto_action == PUMP_AUTO_TIMEOUT){
 8000f2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d116      	bne.n	8000f64 <Start_Task_PumpControl+0x88>
				g_pump_mode = PUMP_AUTO; // Turn on Pump Auto Mode when return from timeout
 8000f36:	4b59      	ldr	r3, [pc, #356]	; (800109c <Start_Task_PumpControl+0x1c0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e012      	b.n	8000f64 <Start_Task_PumpControl+0x88>
			}
		}

		// Connection timeout check
		else{
			SBT_System_Failure(TIMEOUT);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ffb1 	bl	8000ea6 <SBT_System_Failure>
			pump_auto_action = PUMP_AUTO_TIMEOUT; // Variable to check when return from timeout
 8000f44:	2302      	movs	r3, #2
 8000f46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			if(pump_fatal_alarm.pump_current_zero || pump_fatal_alarm.pump_overcurrent){
 8000f4a:	7d3b      	ldrb	r3, [r7, #20]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <Start_Task_PumpControl+0x7a>
 8000f50:	7d7b      	ldrb	r3, [r7, #21]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <Start_Task_PumpControl+0x82>
				g_pump_mode = PUMP_OFF;
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <Start_Task_PumpControl+0x1c0>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e002      	b.n	8000f64 <Start_Task_PumpControl+0x88>
			}
			else{
				g_pump_mode = PUMP_ON;
 8000f5e:	4b4f      	ldr	r3, [pc, #316]	; (800109c <Start_Task_PumpControl+0x1c0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
			}
		}


		// Flow analysis. Roughly every 30 seconds
		if(loop_ctr >= 30 && g_pump_mode != PUMP_OFF){
 8000f64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f68:	2b1d      	cmp	r3, #29
 8000f6a:	d94c      	bls.n	8001006 <Start_Task_PumpControl+0x12a>
 8000f6c:	4b4b      	ldr	r3, [pc, #300]	; (800109c <Start_Task_PumpControl+0x1c0>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d047      	beq.n	8001006 <Start_Task_PumpControl+0x12a>
			// Read pump's current
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4849      	ldr	r0, [pc, #292]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 8000f7c:	f000 fc2a 	bl	80017d4 <HAL_GPIO_WritePin>
			osDelay(MEASURMENT_TIME);
 8000f80:	20c8      	movs	r0, #200	; 0xc8
 8000f82:	f002 f81c 	bl	8002fbe <osDelay>
			// Obtain pumps current value here
			current_state = SBT_Bilge_Pump_Current_Analysis(p_msg_received->bilge_current);
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff4d 	bl	8000e2c <SBT_Bilge_Pump_Current_Analysis>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(pump_auto_action != PUMP_AUTO_ON){
 8000f98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d004      	beq.n	8000faa <Start_Task_PumpControl+0xce>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	483e      	ldr	r0, [pc, #248]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 8000fa6:	f000 fc15 	bl	80017d4 <HAL_GPIO_WritePin>
			}

			// Fatal error msg handling (just for manual control purpose)
			if(current_state == ZERO){
 8000faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d108      	bne.n	8000fc4 <Start_Task_PumpControl+0xe8>
				pump_fatal_alarm.pump_current_zero = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	753b      	strb	r3, [r7, #20]
				SBT_System_Failure(PUMP_BROKEN);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ff75 	bl	8000ea6 <SBT_System_Failure>
				loop_ctr = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000fc2:	e020      	b.n	8001006 <Start_Task_PumpControl+0x12a>
			}
			else if(current_state == OVERCURRENT){
 8000fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d108      	bne.n	8000fde <Start_Task_PumpControl+0x102>
				pump_fatal_alarm.pump_overcurrent = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	757b      	strb	r3, [r7, #21]
				SBT_System_Failure(PUMP_OVERCURRENT);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff ff68 	bl	8000ea6 <SBT_System_Failure>
				loop_ctr = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000fdc:	e013      	b.n	8001006 <Start_Task_PumpControl+0x12a>
			}
			else if(current_state == WATER_DETECTED){
 8000fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d108      	bne.n	8000ff8 <Start_Task_PumpControl+0x11c>
				pump_fatal_alarm.pump_water_detected = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	75bb      	strb	r3, [r7, #22]
				SBT_System_Failure(PUMP_WATER_DETECTED);
 8000fea:	2002      	movs	r0, #2
 8000fec:	f7ff ff5b 	bl	8000ea6 <SBT_System_Failure>
				loop_ctr = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000ff6:	e006      	b.n	8001006 <Start_Task_PumpControl+0x12a>
			}
			else{
				pump_fatal_alarm.pump_current_zero = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	753b      	strb	r3, [r7, #20]
				pump_fatal_alarm.pump_overcurrent = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	757b      	strb	r3, [r7, #21]
				loop_ctr = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			}
		}

		// Pump Mode handling
		switch(g_pump_mode){
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <Start_Task_PumpControl+0x1c0>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d009      	beq.n	8001024 <Start_Task_PumpControl+0x148>
 8001010:	2b02      	cmp	r3, #2
 8001012:	d00d      	beq.n	8001030 <Start_Task_PumpControl+0x154>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d133      	bne.n	8001080 <Start_Task_PumpControl+0x1a4>
			case PUMP_ON:{
				HAL_GPIO_WritePin(Cooling_Pump_GPIO_Port, Cooling_Pump_Pin, SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2120      	movs	r1, #32
 800101c:	4820      	ldr	r0, [pc, #128]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 800101e:	f000 fbd9 	bl	80017d4 <HAL_GPIO_WritePin>
				
				// chceck current
				
				break;
 8001022:	e02d      	b.n	8001080 <Start_Task_PumpControl+0x1a4>
			}

			case PUMP_OFF:{
				HAL_GPIO_WritePin(Cooling_Pump_GPIO_Port, Cooling_Pump_Pin, RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2120      	movs	r1, #32
 8001028:	481d      	ldr	r0, [pc, #116]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 800102a:	f000 fbd3 	bl	80017d4 <HAL_GPIO_WritePin>

				// chceck current

				break;
 800102e:	e027      	b.n	8001080 <Start_Task_PumpControl+0x1a4>
			}

			case PUMP_AUTO:{
				// Fatal error handling
				if(pump_fatal_alarm.pump_current_zero || pump_fatal_alarm.pump_overcurrent){
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <Start_Task_PumpControl+0x160>
 8001036:	7d7b      	ldrb	r3, [r7, #21]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <Start_Task_PumpControl+0x16c>
					HAL_GPIO_WritePin(Cooling_Pump_GPIO_Port, Cooling_Pump_Pin, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2120      	movs	r1, #32
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 8001042:	f000 fbc7 	bl	80017d4 <HAL_GPIO_WritePin>
					break;
 8001046:	e01b      	b.n	8001080 <Start_Task_PumpControl+0x1a4>
				}

				// Regular controll
				pump_auto_action = SBT_Pump_Controll(current_state);
 8001048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fee1 	bl	8000e14 <SBT_Pump_Controll>
 8001052:	4603      	mov	r3, r0
 8001054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				switch(pump_auto_action){
 8001058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <Start_Task_PumpControl+0x196>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d000      	beq.n	8001066 <Start_Task_PumpControl+0x18a>
					case PUMP_AUTO_OFF:{
						HAL_GPIO_WritePin(Cooling_Pump_GPIO_Port, Cooling_Pump_Pin, RESET);
						break;
					}
				} 
				break;
 8001064:	e00b      	b.n	800107e <Start_Task_PumpControl+0x1a2>
						HAL_GPIO_WritePin(Cooling_Pump_GPIO_Port, Cooling_Pump_Pin, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2120      	movs	r1, #32
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 800106c:	f000 fbb2 	bl	80017d4 <HAL_GPIO_WritePin>
						break;
 8001070:	e005      	b.n	800107e <Start_Task_PumpControl+0x1a2>
						HAL_GPIO_WritePin(Cooling_Pump_GPIO_Port, Cooling_Pump_Pin, RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2120      	movs	r1, #32
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <Start_Task_PumpControl+0x1c4>)
 8001078:	f000 fbac 	bl	80017d4 <HAL_GPIO_WritePin>
						break;
 800107c:	bf00      	nop
				break;
 800107e:	bf00      	nop
			}
		}
		loop_ctr++;
 8001080:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001084:	3301      	adds	r3, #1
 8001086:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		osMailFree(mail, p_msg_received);
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <Start_Task_PumpControl+0x1bc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fa07 	bl	80034a4 <osMailFree>
		evt = osMailGet(mail, TASK_BILGE_PUMP_COMMUNICATION_DELAY);
 8001096:	e73c      	b.n	8000f12 <Start_Task_PumpControl+0x36>
 8001098:	20004448 	.word	0x20004448
 800109c:	20000004 	.word	0x20000004
 80010a0:	40020000 	.word	0x40020000

080010a4 <uart_interrupt_isr>:
__weak void uartRxIdle(){
	uart_state = UART_READY;
}


void uart_interrupt_isr(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

	if( myUART->SR & USART_SR_RXNE ){
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <uart_interrupt_isr+0x40>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <uart_interrupt_isr+0x20>
		uint8_t data = myUART->DR;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <uart_interrupt_isr+0x40>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	71fb      	strb	r3, [r7, #7]
		uartRxClb(data);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe10 	bl	8000ce4 <uartRxClb>

	}
	if( myUART->SR & USART_SR_ORE){
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <uart_interrupt_isr+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <uart_interrupt_isr+0x36>
		trash = myUART->DR;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <uart_interrupt_isr+0x40>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <uart_interrupt_isr+0x44>)
 80010d8:	701a      	strb	r2, [r3, #0]
		USART2->CR1 &= ~USART_CR1_IDLEIE;
		trash = USART2->DR;
		uartRxIdle();
	}*/

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40004400 	.word	0x40004400
 80010e8:	200045bc 	.word	0x200045bc

080010ec <uart_interrupts_enable>:
	}

}


void uart_interrupts_enable(){
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	data_length = 0;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <uart_interrupts_enable+0x28>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	801a      	strh	r2, [r3, #0]
	uart_state = UART_NOT_READY;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <uart_interrupts_enable+0x2c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
	myUART->CR1 |= USART_CR1_RXNEIE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <uart_interrupts_enable+0x30>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <uart_interrupts_enable+0x30>)
 8001102:	f043 0320 	orr.w	r3, r3, #32
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000029a 	.word	0x2000029a
 8001118:	200045d4 	.word	0x200045d4
 800111c:	40004400 	.word	0x40004400

08001120 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART2_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001158:	f001 fada 	bl	8002710 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f7ff fb53 	bl	800080c <Error_Handler>
  }

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200045d8 	.word	0x200045d8
 8001170:	40004400 	.word	0x40004400

08001174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_UART_MspInit+0x94>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d133      	bne.n	80011fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_UART_MspInit+0x98>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <HAL_UART_MspInit+0x98>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_UART_MspInit+0x98>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_UART_MspInit+0x98>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x98>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ce:	230c      	movs	r3, #12
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011ea:	f000 f961 	bl	80014b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2105      	movs	r1, #5
 80011f2:	2026      	movs	r0, #38	; 0x26
 80011f4:	f000 f932 	bl	800145c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f8:	2026      	movs	r0, #38	; 0x26
 80011fa:	f000 f94b 	bl	8001494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004400 	.word	0x40004400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr  r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123e:	f7ff fd3b 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f004 fa93 	bl	800576c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fa51 	bl	80006ec <main>
  bx  lr    
 800124a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001250:	08005900 	.word	0x08005900
  ldr  r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001258:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800125c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001260:	2000461c 	.word	0x2000461c

08001264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_Init+0x40>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_Init+0x40>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_Init+0x40>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f8d8 	bl	8001446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fc8a 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff fc5c 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	20004618 	.word	0x20004618

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20004618 	.word	0x20004618

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff4c 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146e:	f7ff ff61 	bl	8001334 <__NVIC_GetPriorityGrouping>
 8001472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	6978      	ldr	r0, [r7, #20]
 800147a:	f7ff ffb1 	bl	80013e0 <NVIC_EncodePriority>
 800147e:	4602      	mov	r2, r0
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff80 	bl	800138c <__NVIC_SetPriority>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff54 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e165      	b.n	8001798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8154 	bne.w	8001792 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d00b      	beq.n	800150a <HAL_GPIO_Init+0x5a>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014fe:	2b11      	cmp	r3, #17
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b12      	cmp	r3, #18
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0xfc>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80ae 	beq.w	8001792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <HAL_GPIO_Init+0x300>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <HAL_GPIO_Init+0x304>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x21a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4d      	ldr	r2, [pc, #308]	; (80017b8 <HAL_GPIO_Init+0x308>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x216>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <HAL_GPIO_Init+0x30c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x212>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4b      	ldr	r2, [pc, #300]	; (80017c0 <HAL_GPIO_Init+0x310>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x20e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_GPIO_Init+0x314>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x20a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_GPIO_Init+0x318>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x206>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a48      	ldr	r2, [pc, #288]	; (80017cc <HAL_GPIO_Init+0x31c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x202>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x21c>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4934      	ldr	r1, [pc, #208]	; (80017b0 <HAL_GPIO_Init+0x300>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_GPIO_Init+0x320>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170e:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001738:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_GPIO_Init+0x320>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_GPIO_Init+0x320>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_GPIO_Init+0x320>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae96 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	3724      	adds	r7, #36	; 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40021400 	.word	0x40021400
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40013c00 	.word	0x40013c00

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f0:	e003      	b.n	80017fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	041a      	lsls	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fcec 	bl	80012d4 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fce8 	bl	80012d4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f887 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001992:	4601      	mov	r1, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	fa21 f303 	lsr.w	r3, r1, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8fe 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	080058cc 	.word	0x080058cc
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000008 	.word	0x20000008

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4601      	mov	r1, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	080058dc 	.word	0x080058dc

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffdc 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0b5b      	lsrs	r3, r3, #13
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	080058dc 	.word	0x080058dc

08001a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220f      	movs	r2, #15
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RCC_GetClockConfig+0x60>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 020f 	and.w	r2, r3, #15
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aba:	4bc6      	ldr	r3, [pc, #792]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	f200 817e 	bhi.w	8001dc4 <HAL_RCC_GetSysClockFreq+0x324>
 8001ac8:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ace:	bf00      	nop
 8001ad0:	08001b05 	.word	0x08001b05
 8001ad4:	08001dc5 	.word	0x08001dc5
 8001ad8:	08001dc5 	.word	0x08001dc5
 8001adc:	08001dc5 	.word	0x08001dc5
 8001ae0:	08001b0b 	.word	0x08001b0b
 8001ae4:	08001dc5 	.word	0x08001dc5
 8001ae8:	08001dc5 	.word	0x08001dc5
 8001aec:	08001dc5 	.word	0x08001dc5
 8001af0:	08001b11 	.word	0x08001b11
 8001af4:	08001dc5 	.word	0x08001dc5
 8001af8:	08001dc5 	.word	0x08001dc5
 8001afc:	08001dc5 	.word	0x08001dc5
 8001b00:	08001c6d 	.word	0x08001c6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4bb4      	ldr	r3, [pc, #720]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001b06:	613b      	str	r3, [r7, #16]
       break;
 8001b08:	e15f      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0a:	4bb4      	ldr	r3, [pc, #720]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x33c>)
 8001b0c:	613b      	str	r3, [r7, #16]
      break;
 8001b0e:	e15c      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b10:	4bb0      	ldr	r3, [pc, #704]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b18:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1a:	4bae      	ldr	r3, [pc, #696]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04a      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4bab      	ldr	r3, [pc, #684]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	f04f 0400 	mov.w	r4, #0
 8001b30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	ea03 0501 	and.w	r5, r3, r1
 8001b3c:	ea04 0602 	and.w	r6, r4, r2
 8001b40:	4629      	mov	r1, r5
 8001b42:	4632      	mov	r2, r6
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	0154      	lsls	r4, r2, #5
 8001b4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b52:	014b      	lsls	r3, r1, #5
 8001b54:	4619      	mov	r1, r3
 8001b56:	4622      	mov	r2, r4
 8001b58:	1b49      	subs	r1, r1, r5
 8001b5a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	0194      	lsls	r4, r2, #6
 8001b68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b6c:	018b      	lsls	r3, r1, #6
 8001b6e:	1a5b      	subs	r3, r3, r1
 8001b70:	eb64 0402 	sbc.w	r4, r4, r2
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	00e2      	lsls	r2, r4, #3
 8001b7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b82:	00d9      	lsls	r1, r3, #3
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	195b      	adds	r3, r3, r5
 8001b8a:	eb44 0406 	adc.w	r4, r4, r6
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	0262      	lsls	r2, r4, #9
 8001b98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b9c:	0259      	lsls	r1, r3, #9
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f04f 0400 	mov.w	r4, #0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	f7fe fb2e 	bl	8000210 <__aeabi_uldivmod>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e049      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbc:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	ea03 0501 	and.w	r5, r3, r1
 8001bd2:	ea04 0602 	and.w	r6, r4, r2
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	4632      	mov	r2, r6
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	f04f 0400 	mov.w	r4, #0
 8001be2:	0154      	lsls	r4, r2, #5
 8001be4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001be8:	014b      	lsls	r3, r1, #5
 8001bea:	4619      	mov	r1, r3
 8001bec:	4622      	mov	r2, r4
 8001bee:	1b49      	subs	r1, r1, r5
 8001bf0:	eb62 0206 	sbc.w	r2, r2, r6
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	f04f 0400 	mov.w	r4, #0
 8001bfc:	0194      	lsls	r4, r2, #6
 8001bfe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	1a5b      	subs	r3, r3, r1
 8001c06:	eb64 0402 	sbc.w	r4, r4, r2
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c18:	00d9      	lsls	r1, r3, #3
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	195b      	adds	r3, r3, r5
 8001c20:	eb44 0406 	adc.w	r4, r4, r6
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	02a2      	lsls	r2, r4, #10
 8001c2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c32:	0299      	lsls	r1, r3, #10
 8001c34:	460b      	mov	r3, r1
 8001c36:	4614      	mov	r4, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f04f 0400 	mov.w	r4, #0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4623      	mov	r3, r4
 8001c46:	f7fe fae3 	bl	8000210 <__aeabi_uldivmod>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c50:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	613b      	str	r3, [r7, #16]
      break;
 8001c6a:	e0ae      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d04a      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	ea03 0501 	and.w	r5, r3, r1
 8001c98:	ea04 0602 	and.w	r6, r4, r2
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	4632      	mov	r2, r6
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f04f 0400 	mov.w	r4, #0
 8001ca8:	0154      	lsls	r4, r2, #5
 8001caa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cae:	014b      	lsls	r3, r1, #5
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	1b49      	subs	r1, r1, r5
 8001cb6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	f04f 0400 	mov.w	r4, #0
 8001cc2:	0194      	lsls	r4, r2, #6
 8001cc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cc8:	018b      	lsls	r3, r1, #6
 8001cca:	1a5b      	subs	r3, r3, r1
 8001ccc:	eb64 0402 	sbc.w	r4, r4, r2
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	00e2      	lsls	r2, r4, #3
 8001cda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cde:	00d9      	lsls	r1, r3, #3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	195b      	adds	r3, r3, r5
 8001ce6:	eb44 0406 	adc.w	r4, r4, r6
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	0262      	lsls	r2, r4, #9
 8001cf4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001cf8:	0259      	lsls	r1, r3, #9
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4621      	mov	r1, r4
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f7fe fa80 	bl	8000210 <__aeabi_uldivmod>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e049      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	f04f 0400 	mov.w	r4, #0
 8001d22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	ea03 0501 	and.w	r5, r3, r1
 8001d2e:	ea04 0602 	and.w	r6, r4, r2
 8001d32:	4629      	mov	r1, r5
 8001d34:	4632      	mov	r2, r6
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	f04f 0400 	mov.w	r4, #0
 8001d3e:	0154      	lsls	r4, r2, #5
 8001d40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d44:	014b      	lsls	r3, r1, #5
 8001d46:	4619      	mov	r1, r3
 8001d48:	4622      	mov	r2, r4
 8001d4a:	1b49      	subs	r1, r1, r5
 8001d4c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f04f 0400 	mov.w	r4, #0
 8001d58:	0194      	lsls	r4, r2, #6
 8001d5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d5e:	018b      	lsls	r3, r1, #6
 8001d60:	1a5b      	subs	r3, r3, r1
 8001d62:	eb64 0402 	sbc.w	r4, r4, r2
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	00e2      	lsls	r2, r4, #3
 8001d70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d74:	00d9      	lsls	r1, r3, #3
 8001d76:	460b      	mov	r3, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	195b      	adds	r3, r3, r5
 8001d7c:	eb44 0406 	adc.w	r4, r4, r6
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	02a2      	lsls	r2, r4, #10
 8001d8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d8e:	0299      	lsls	r1, r3, #10
 8001d90:	460b      	mov	r3, r1
 8001d92:	4614      	mov	r4, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	4621      	mov	r1, r4
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f04f 0400 	mov.w	r4, #0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fa35 	bl	8000210 <__aeabi_uldivmod>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0f1b      	lsrs	r3, r3, #28
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	613b      	str	r3, [r7, #16]
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001dc6:	613b      	str	r3, [r7, #16]
      break;
 8001dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dca:	693b      	ldr	r3, [r7, #16]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8083 	beq.w	8001f00 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dfa:	4b95      	ldr	r3, [pc, #596]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d019      	beq.n	8001e3a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e06:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d106      	bne.n	8001e20 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e12:	4b8f      	ldr	r3, [pc, #572]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1e:	d00c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e20:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2c:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b85      	ldr	r3, [pc, #532]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d05b      	beq.n	8001efe <HAL_RCC_OscConfig+0x11e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d157      	bne.n	8001efe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e216      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x8a>
 8001e5c:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7b      	ldr	r2, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e01d      	b.n	8001ea6 <HAL_RCC_OscConfig+0xc6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0xae>
 8001e74:	4b76      	ldr	r3, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a75      	ldr	r2, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b73      	ldr	r3, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a72      	ldr	r2, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0xc6>
 8001e8e:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6f      	ldr	r2, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d013      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff fa11 	bl	80012d4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fa0d 	bl	80012d4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	; 0x64
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1db      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0xd6>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f9fd 	bl	80012d4 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ede:	f7ff f9f9 	bl	80012d4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1c7      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0xfe>
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d06f      	beq.n	8001fec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d017      	beq.n	8001f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f18:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d11c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3c:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d116      	bne.n	8001f76 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x180>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e18f      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4938      	ldr	r1, [pc, #224]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	e03a      	b.n	8001fec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f9a6 	bl	80012d4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f9a2 	bl	80012d4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e170      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4925      	ldr	r1, [pc, #148]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x274>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f985 	bl	80012d4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff f981 	bl	80012d4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e14f      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d037      	beq.n	8002068 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d016      	beq.n	800202e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff f965 	bl	80012d4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff f961 	bl	80012d4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e12f      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x22e>
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f94e 	bl	80012d4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203a:	e00f      	b.n	800205c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f94a 	bl	80012d4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d908      	bls.n	800205c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e118      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	42470000 	.word	0x42470000
 8002058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e9      	bne.n	800203c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8097 	beq.w	80021a4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b83      	ldr	r3, [pc, #524]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a7e      	ldr	r2, [pc, #504]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b79      	ldr	r3, [pc, #484]	; (800228c <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7ff f909 	bl	80012d4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7ff f905 	bl	80012d4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0d3      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x4ac>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x31a>
 80020ec:	4b66      	ldr	r3, [pc, #408]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	4a65      	ldr	r2, [pc, #404]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x354>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x33c>
 8002102:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a60      	ldr	r2, [pc, #384]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5d      	ldr	r2, [pc, #372]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x354>
 800211c:	4b5a      	ldr	r3, [pc, #360]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a59      	ldr	r2, [pc, #356]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b57      	ldr	r3, [pc, #348]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a56      	ldr	r2, [pc, #344]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff f8ca 	bl	80012d4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff f8c6 	bl	80012d4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e092      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCC_OscConfig+0x364>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff f8b4 	bl	80012d4 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff f8b0 	bl	80012d4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e07c      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d068      	beq.n	800227e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d060      	beq.n	800227a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d145      	bne.n	800224c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_OscConfig+0x4b0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f885 	bl	80012d4 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff f881 	bl	80012d4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e04f      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	019b      	lsls	r3, r3, #6
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	3b01      	subs	r3, #1
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	071b      	lsls	r3, r3, #28
 8002218:	491b      	ldr	r1, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_OscConfig+0x4b0>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f856 	bl	80012d4 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f852 	bl	80012d4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e020      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x44c>
 800224a:	e018      	b.n	800227e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x4b0>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f83f 	bl	80012d4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f83b 	bl	80012d4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e009      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x4a8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x47a>
 8002278:	e001      	b.n	800227e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40007000 	.word	0x40007000
 8002290:	42470060 	.word	0x42470060

08002294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e01d      	b.n	80022e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f815 	bl	80022ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f000 f968 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d007      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d122      	bne.n	80023a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d11b      	bne.n	80023a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0202 	mvn.w	r2, #2
 8002372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8ee 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 800238e:	e005      	b.n	800239c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f8e0 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8f1 	bl	800257e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d122      	bne.n	80023f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d11b      	bne.n	80023f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f06f 0204 	mvn.w	r2, #4
 80023c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f8c4 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 80023e2:	e005      	b.n	80023f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f8b6 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f8c7 	bl	800257e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b08      	cmp	r3, #8
 8002402:	d122      	bne.n	800244a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11b      	bne.n	800244a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0208 	mvn.w	r2, #8
 800241a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f89a 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 8002436:	e005      	b.n	8002444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f88c 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f89d 	bl	800257e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b10      	cmp	r3, #16
 8002456:	d122      	bne.n	800249e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b10      	cmp	r3, #16
 8002464:	d11b      	bne.n	800249e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0210 	mvn.w	r2, #16
 800246e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2208      	movs	r2, #8
 8002474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f870 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 800248a:	e005      	b.n	8002498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f862 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f873 	bl	800257e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10e      	bne.n	80024ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0201 	mvn.w	r2, #1
 80024c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fe f98f 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d10e      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d107      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f903 	bl	80026fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d10e      	bne.n	8002522 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d107      	bne.n	8002522 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800251a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f838 	bl	8002592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b20      	cmp	r3, #32
 800252e:	d10e      	bne.n	800254e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	d107      	bne.n	800254e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0220 	mvn.w	r2, #32
 8002546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8cd 	bl	80026e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a40      	ldr	r2, [pc, #256]	; (80026bc <TIM_Base_SetConfig+0x114>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <TIM_Base_SetConfig+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d00f      	beq.n	80025e8 <TIM_Base_SetConfig+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3d      	ldr	r2, [pc, #244]	; (80026c0 <TIM_Base_SetConfig+0x118>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3c      	ldr	r2, [pc, #240]	; (80026c4 <TIM_Base_SetConfig+0x11c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <TIM_Base_SetConfig+0x40>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <TIM_Base_SetConfig+0x120>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x40>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <TIM_Base_SetConfig+0x124>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <TIM_Base_SetConfig+0x114>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d027      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <TIM_Base_SetConfig+0x118>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d023      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <TIM_Base_SetConfig+0x11c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01f      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <TIM_Base_SetConfig+0x120>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01b      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a29      	ldr	r2, [pc, #164]	; (80026cc <TIM_Base_SetConfig+0x124>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d017      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <TIM_Base_SetConfig+0x128>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <TIM_Base_SetConfig+0x12c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00f      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <TIM_Base_SetConfig+0x130>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a25      	ldr	r2, [pc, #148]	; (80026dc <TIM_Base_SetConfig+0x134>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <TIM_Base_SetConfig+0x138>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <TIM_Base_SetConfig+0x13c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <TIM_Base_SetConfig+0x114>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_Base_SetConfig+0xf8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <TIM_Base_SetConfig+0x124>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d103      	bne.n	80026a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	615a      	str	r2, [r3, #20]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40000800 	.word	0x40000800
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	40010400 	.word	0x40010400
 80026d0:	40014000 	.word	0x40014000
 80026d4:	40014400 	.word	0x40014400
 80026d8:	40014800 	.word	0x40014800
 80026dc:	40001800 	.word	0x40001800
 80026e0:	40001c00 	.word	0x40001c00
 80026e4:	40002000 	.word	0x40002000

080026e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e03f      	b.n	80027a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fd1c 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	; 0x24
 8002740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f829 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027ee:	f023 030c 	bic.w	r3, r3, #12
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281a:	f040 818b 	bne.w	8002b34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4ac1      	ldr	r2, [pc, #772]	; (8002b28 <UART_SetConfig+0x37c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d005      	beq.n	8002834 <UART_SetConfig+0x88>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4abf      	ldr	r2, [pc, #764]	; (8002b2c <UART_SetConfig+0x380>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 80bd 	bne.w	80029ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002834:	f7ff f8ee 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002838:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	461d      	mov	r5, r3
 800283e:	f04f 0600 	mov.w	r6, #0
 8002842:	46a8      	mov	r8, r5
 8002844:	46b1      	mov	r9, r6
 8002846:	eb18 0308 	adds.w	r3, r8, r8
 800284a:	eb49 0409 	adc.w	r4, r9, r9
 800284e:	4698      	mov	r8, r3
 8002850:	46a1      	mov	r9, r4
 8002852:	eb18 0805 	adds.w	r8, r8, r5
 8002856:	eb49 0906 	adc.w	r9, r9, r6
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002866:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800286a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800286e:	4688      	mov	r8, r1
 8002870:	4691      	mov	r9, r2
 8002872:	eb18 0005 	adds.w	r0, r8, r5
 8002876:	eb49 0106 	adc.w	r1, r9, r6
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	461d      	mov	r5, r3
 8002880:	f04f 0600 	mov.w	r6, #0
 8002884:	196b      	adds	r3, r5, r5
 8002886:	eb46 0406 	adc.w	r4, r6, r6
 800288a:	461a      	mov	r2, r3
 800288c:	4623      	mov	r3, r4
 800288e:	f7fd fcbf 	bl	8000210 <__aeabi_uldivmod>
 8002892:	4603      	mov	r3, r0
 8002894:	460c      	mov	r4, r1
 8002896:	461a      	mov	r2, r3
 8002898:	4ba5      	ldr	r3, [pc, #660]	; (8002b30 <UART_SetConfig+0x384>)
 800289a:	fba3 2302 	umull	r2, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	461d      	mov	r5, r3
 80028a8:	f04f 0600 	mov.w	r6, #0
 80028ac:	46a9      	mov	r9, r5
 80028ae:	46b2      	mov	sl, r6
 80028b0:	eb19 0309 	adds.w	r3, r9, r9
 80028b4:	eb4a 040a 	adc.w	r4, sl, sl
 80028b8:	4699      	mov	r9, r3
 80028ba:	46a2      	mov	sl, r4
 80028bc:	eb19 0905 	adds.w	r9, r9, r5
 80028c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028d8:	4689      	mov	r9, r1
 80028da:	4692      	mov	sl, r2
 80028dc:	eb19 0005 	adds.w	r0, r9, r5
 80028e0:	eb4a 0106 	adc.w	r1, sl, r6
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	461d      	mov	r5, r3
 80028ea:	f04f 0600 	mov.w	r6, #0
 80028ee:	196b      	adds	r3, r5, r5
 80028f0:	eb46 0406 	adc.w	r4, r6, r6
 80028f4:	461a      	mov	r2, r3
 80028f6:	4623      	mov	r3, r4
 80028f8:	f7fd fc8a 	bl	8000210 <__aeabi_uldivmod>
 80028fc:	4603      	mov	r3, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	461a      	mov	r2, r3
 8002902:	4b8b      	ldr	r3, [pc, #556]	; (8002b30 <UART_SetConfig+0x384>)
 8002904:	fba3 1302 	umull	r1, r3, r3, r2
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	3332      	adds	r3, #50	; 0x32
 8002916:	4a86      	ldr	r2, [pc, #536]	; (8002b30 <UART_SetConfig+0x384>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002924:	4498      	add	r8, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	461d      	mov	r5, r3
 800292a:	f04f 0600 	mov.w	r6, #0
 800292e:	46a9      	mov	r9, r5
 8002930:	46b2      	mov	sl, r6
 8002932:	eb19 0309 	adds.w	r3, r9, r9
 8002936:	eb4a 040a 	adc.w	r4, sl, sl
 800293a:	4699      	mov	r9, r3
 800293c:	46a2      	mov	sl, r4
 800293e:	eb19 0905 	adds.w	r9, r9, r5
 8002942:	eb4a 0a06 	adc.w	sl, sl, r6
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002952:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002956:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800295a:	4689      	mov	r9, r1
 800295c:	4692      	mov	sl, r2
 800295e:	eb19 0005 	adds.w	r0, r9, r5
 8002962:	eb4a 0106 	adc.w	r1, sl, r6
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	461d      	mov	r5, r3
 800296c:	f04f 0600 	mov.w	r6, #0
 8002970:	196b      	adds	r3, r5, r5
 8002972:	eb46 0406 	adc.w	r4, r6, r6
 8002976:	461a      	mov	r2, r3
 8002978:	4623      	mov	r3, r4
 800297a:	f7fd fc49 	bl	8000210 <__aeabi_uldivmod>
 800297e:	4603      	mov	r3, r0
 8002980:	460c      	mov	r4, r1
 8002982:	461a      	mov	r2, r3
 8002984:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <UART_SetConfig+0x384>)
 8002986:	fba3 1302 	umull	r1, r3, r3, r2
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2164      	movs	r1, #100	; 0x64
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	3332      	adds	r3, #50	; 0x32
 8002998:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <UART_SetConfig+0x384>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	f003 0207 	and.w	r2, r3, #7
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4442      	add	r2, r8
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	e26f      	b.n	8002e8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ae:	f7ff f81d 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 80029b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	461d      	mov	r5, r3
 80029b8:	f04f 0600 	mov.w	r6, #0
 80029bc:	46a8      	mov	r8, r5
 80029be:	46b1      	mov	r9, r6
 80029c0:	eb18 0308 	adds.w	r3, r8, r8
 80029c4:	eb49 0409 	adc.w	r4, r9, r9
 80029c8:	4698      	mov	r8, r3
 80029ca:	46a1      	mov	r9, r4
 80029cc:	eb18 0805 	adds.w	r8, r8, r5
 80029d0:	eb49 0906 	adc.w	r9, r9, r6
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029e8:	4688      	mov	r8, r1
 80029ea:	4691      	mov	r9, r2
 80029ec:	eb18 0005 	adds.w	r0, r8, r5
 80029f0:	eb49 0106 	adc.w	r1, r9, r6
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	461d      	mov	r5, r3
 80029fa:	f04f 0600 	mov.w	r6, #0
 80029fe:	196b      	adds	r3, r5, r5
 8002a00:	eb46 0406 	adc.w	r4, r6, r6
 8002a04:	461a      	mov	r2, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	f7fd fc02 	bl	8000210 <__aeabi_uldivmod>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	460c      	mov	r4, r1
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <UART_SetConfig+0x384>)
 8002a14:	fba3 2302 	umull	r2, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	461d      	mov	r5, r3
 8002a22:	f04f 0600 	mov.w	r6, #0
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46b2      	mov	sl, r6
 8002a2a:	eb19 0309 	adds.w	r3, r9, r9
 8002a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8002a32:	4699      	mov	r9, r3
 8002a34:	46a2      	mov	sl, r4
 8002a36:	eb19 0905 	adds.w	r9, r9, r5
 8002a3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a52:	4689      	mov	r9, r1
 8002a54:	4692      	mov	sl, r2
 8002a56:	eb19 0005 	adds.w	r0, r9, r5
 8002a5a:	eb4a 0106 	adc.w	r1, sl, r6
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	461d      	mov	r5, r3
 8002a64:	f04f 0600 	mov.w	r6, #0
 8002a68:	196b      	adds	r3, r5, r5
 8002a6a:	eb46 0406 	adc.w	r4, r6, r6
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4623      	mov	r3, r4
 8002a72:	f7fd fbcd 	bl	8000210 <__aeabi_uldivmod>
 8002a76:	4603      	mov	r3, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <UART_SetConfig+0x384>)
 8002a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2164      	movs	r1, #100	; 0x64
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	3332      	adds	r3, #50	; 0x32
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <UART_SetConfig+0x384>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a9e:	4498      	add	r8, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	f04f 0600 	mov.w	r6, #0
 8002aa8:	46a9      	mov	r9, r5
 8002aaa:	46b2      	mov	sl, r6
 8002aac:	eb19 0309 	adds.w	r3, r9, r9
 8002ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	46a2      	mov	sl, r4
 8002ab8:	eb19 0905 	adds.w	r9, r9, r5
 8002abc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ad4:	4689      	mov	r9, r1
 8002ad6:	4692      	mov	sl, r2
 8002ad8:	eb19 0005 	adds.w	r0, r9, r5
 8002adc:	eb4a 0106 	adc.w	r1, sl, r6
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	f04f 0600 	mov.w	r6, #0
 8002aea:	196b      	adds	r3, r5, r5
 8002aec:	eb46 0406 	adc.w	r4, r6, r6
 8002af0:	461a      	mov	r2, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	f7fd fb8c 	bl	8000210 <__aeabi_uldivmod>
 8002af8:	4603      	mov	r3, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <UART_SetConfig+0x384>)
 8002b00:	fba3 1302 	umull	r1, r3, r3, r2
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	2164      	movs	r1, #100	; 0x64
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	3332      	adds	r3, #50	; 0x32
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <UART_SetConfig+0x384>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	f003 0207 	and.w	r2, r3, #7
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4442      	add	r2, r8
 8002b24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b26:	e1b2      	b.n	8002e8e <UART_SetConfig+0x6e2>
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40011400 	.word	0x40011400
 8002b30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4ad7      	ldr	r2, [pc, #860]	; (8002e98 <UART_SetConfig+0x6ec>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d005      	beq.n	8002b4a <UART_SetConfig+0x39e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4ad6      	ldr	r2, [pc, #856]	; (8002e9c <UART_SetConfig+0x6f0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	f040 80d1 	bne.w	8002cec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b4a:	f7fe ff63 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002b4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	469a      	mov	sl, r3
 8002b54:	f04f 0b00 	mov.w	fp, #0
 8002b58:	46d0      	mov	r8, sl
 8002b5a:	46d9      	mov	r9, fp
 8002b5c:	eb18 0308 	adds.w	r3, r8, r8
 8002b60:	eb49 0409 	adc.w	r4, r9, r9
 8002b64:	4698      	mov	r8, r3
 8002b66:	46a1      	mov	r9, r4
 8002b68:	eb18 080a 	adds.w	r8, r8, sl
 8002b6c:	eb49 090b 	adc.w	r9, r9, fp
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b84:	4688      	mov	r8, r1
 8002b86:	4691      	mov	r9, r2
 8002b88:	eb1a 0508 	adds.w	r5, sl, r8
 8002b8c:	eb4b 0609 	adc.w	r6, fp, r9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	0094      	lsls	r4, r2, #2
 8002ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ba8:	008b      	lsls	r3, r1, #2
 8002baa:	461a      	mov	r2, r3
 8002bac:	4623      	mov	r3, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	f7fd fb2d 	bl	8000210 <__aeabi_uldivmod>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4bb8      	ldr	r3, [pc, #736]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	469b      	mov	fp, r3
 8002bcc:	f04f 0c00 	mov.w	ip, #0
 8002bd0:	46d9      	mov	r9, fp
 8002bd2:	46e2      	mov	sl, ip
 8002bd4:	eb19 0309 	adds.w	r3, r9, r9
 8002bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8002bdc:	4699      	mov	r9, r3
 8002bde:	46a2      	mov	sl, r4
 8002be0:	eb19 090b 	adds.w	r9, r9, fp
 8002be4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bfc:	4689      	mov	r9, r1
 8002bfe:	4692      	mov	sl, r2
 8002c00:	eb1b 0509 	adds.w	r5, fp, r9
 8002c04:	eb4c 060a 	adc.w	r6, ip, sl
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	0094      	lsls	r4, r2, #2
 8002c1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c20:	008b      	lsls	r3, r1, #2
 8002c22:	461a      	mov	r2, r3
 8002c24:	4623      	mov	r3, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	4631      	mov	r1, r6
 8002c2a:	f7fd faf1 	bl	8000210 <__aeabi_uldivmod>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b9a      	ldr	r3, [pc, #616]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002c36:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2164      	movs	r1, #100	; 0x64
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	; 0x32
 8002c48:	4a95      	ldr	r2, [pc, #596]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	4498      	add	r8, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	469b      	mov	fp, r3
 8002c5a:	f04f 0c00 	mov.w	ip, #0
 8002c5e:	46d9      	mov	r9, fp
 8002c60:	46e2      	mov	sl, ip
 8002c62:	eb19 0309 	adds.w	r3, r9, r9
 8002c66:	eb4a 040a 	adc.w	r4, sl, sl
 8002c6a:	4699      	mov	r9, r3
 8002c6c:	46a2      	mov	sl, r4
 8002c6e:	eb19 090b 	adds.w	r9, r9, fp
 8002c72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c8a:	4689      	mov	r9, r1
 8002c8c:	4692      	mov	sl, r2
 8002c8e:	eb1b 0509 	adds.w	r5, fp, r9
 8002c92:	eb4c 060a 	adc.w	r6, ip, sl
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	f04f 0400 	mov.w	r4, #0
 8002ca8:	0094      	lsls	r4, r2, #2
 8002caa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cae:	008b      	lsls	r3, r1, #2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	f7fd faaa 	bl	8000210 <__aeabi_uldivmod>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b77      	ldr	r3, [pc, #476]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	2164      	movs	r1, #100	; 0x64
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	3332      	adds	r3, #50	; 0x32
 8002cd6:	4a72      	ldr	r2, [pc, #456]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4442      	add	r2, r8
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	e0d0      	b.n	8002e8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cec:	f7fe fe7e 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002cf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	469a      	mov	sl, r3
 8002cf6:	f04f 0b00 	mov.w	fp, #0
 8002cfa:	46d0      	mov	r8, sl
 8002cfc:	46d9      	mov	r9, fp
 8002cfe:	eb18 0308 	adds.w	r3, r8, r8
 8002d02:	eb49 0409 	adc.w	r4, r9, r9
 8002d06:	4698      	mov	r8, r3
 8002d08:	46a1      	mov	r9, r4
 8002d0a:	eb18 080a 	adds.w	r8, r8, sl
 8002d0e:	eb49 090b 	adc.w	r9, r9, fp
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d26:	4688      	mov	r8, r1
 8002d28:	4691      	mov	r9, r2
 8002d2a:	eb1a 0508 	adds.w	r5, sl, r8
 8002d2e:	eb4b 0609 	adc.w	r6, fp, r9
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	0094      	lsls	r4, r2, #2
 8002d46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d4a:	008b      	lsls	r3, r1, #2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4623      	mov	r3, r4
 8002d50:	4628      	mov	r0, r5
 8002d52:	4631      	mov	r1, r6
 8002d54:	f7fd fa5c 	bl	8000210 <__aeabi_uldivmod>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002d60:	fba3 2302 	umull	r2, r3, r3, r2
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	469b      	mov	fp, r3
 8002d6e:	f04f 0c00 	mov.w	ip, #0
 8002d72:	46d9      	mov	r9, fp
 8002d74:	46e2      	mov	sl, ip
 8002d76:	eb19 0309 	adds.w	r3, r9, r9
 8002d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d7e:	4699      	mov	r9, r3
 8002d80:	46a2      	mov	sl, r4
 8002d82:	eb19 090b 	adds.w	r9, r9, fp
 8002d86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d9e:	4689      	mov	r9, r1
 8002da0:	4692      	mov	sl, r2
 8002da2:	eb1b 0509 	adds.w	r5, fp, r9
 8002da6:	eb4c 060a 	adc.w	r6, ip, sl
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4619      	mov	r1, r3
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	f04f 0400 	mov.w	r4, #0
 8002dbc:	0094      	lsls	r4, r2, #2
 8002dbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dc2:	008b      	lsls	r3, r1, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	4628      	mov	r0, r5
 8002dca:	4631      	mov	r1, r6
 8002dcc:	f7fd fa20 	bl	8000210 <__aeabi_uldivmod>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	2164      	movs	r1, #100	; 0x64
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	3332      	adds	r3, #50	; 0x32
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df6:	4498      	add	r8, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	469b      	mov	fp, r3
 8002dfc:	f04f 0c00 	mov.w	ip, #0
 8002e00:	46d9      	mov	r9, fp
 8002e02:	46e2      	mov	sl, ip
 8002e04:	eb19 0309 	adds.w	r3, r9, r9
 8002e08:	eb4a 040a 	adc.w	r4, sl, sl
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	46a2      	mov	sl, r4
 8002e10:	eb19 090b 	adds.w	r9, r9, fp
 8002e14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e2c:	4689      	mov	r9, r1
 8002e2e:	4692      	mov	sl, r2
 8002e30:	eb1b 0509 	adds.w	r5, fp, r9
 8002e34:	eb4c 060a 	adc.w	r6, ip, sl
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	0094      	lsls	r4, r2, #2
 8002e4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e50:	008b      	lsls	r3, r1, #2
 8002e52:	461a      	mov	r2, r3
 8002e54:	4623      	mov	r3, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	4631      	mov	r1, r6
 8002e5a:	f7fd f9d9 	bl	8000210 <__aeabi_uldivmod>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460c      	mov	r4, r1
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002e66:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2164      	movs	r1, #100	; 0x64
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	3332      	adds	r3, #50	; 0x32
 8002e78:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <UART_SetConfig+0x6f4>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4442      	add	r2, r8
 8002e8a:	609a      	str	r2, [r3, #8]
}
 8002e8c:	e7ff      	b.n	8002e8e <UART_SetConfig+0x6e2>
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	51eb851f 	.word	0x51eb851f

08002ea4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb6:	2b84      	cmp	r3, #132	; 0x84
 8002eb8:	d005      	beq.n	8002ec6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002eba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3303      	adds	r3, #3
 8002ec4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eda:	f3ef 8305 	mrs	r3, IPSR
 8002ede:	607b      	str	r3, [r7, #4]
  return(result);
 8002ee0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002efc:	f001 fb02 	bl	8004504 <vTaskStartScheduler>
  
  return osOK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002f0a:	f7ff ffe3 	bl	8002ed4 <inHandlerMode>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002f14:	f001 fc0e 	bl	8004734 <xTaskGetTickCountFromISR>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	e002      	b.n	8002f22 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002f1c:	f001 fbfa 	bl	8004714 <xTaskGetTickCount>
 8002f20:	4603      	mov	r3, r0
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f28:	b089      	sub	sp, #36	; 0x24
 8002f2a:	af04      	add	r7, sp, #16
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <osThreadCreate+0x54>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01c      	beq.n	8002f7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685c      	ldr	r4, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681d      	ldr	r5, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691e      	ldr	r6, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ffa6 	bl	8002ea4 <makeFreeRtosPriority>
 8002f58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f62:	9202      	str	r2, [sp, #8]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	9100      	str	r1, [sp, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4632      	mov	r2, r6
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f001 f905 	bl	800417e <xTaskCreateStatic>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e01c      	b.n	8002fb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685c      	ldr	r4, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f86:	b29e      	uxth	r6, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff88 	bl	8002ea4 <makeFreeRtosPriority>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	9200      	str	r2, [sp, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	4632      	mov	r2, r6
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f001 f944 	bl	8004232 <xTaskCreate>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <osDelay+0x16>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	e000      	b.n	8002fd6 <osDelay+0x18>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fa60 	bl	800449c <vTaskDelay>
  
  return osOK;
 8002fdc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af02      	add	r7, sp, #8
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d017      	beq.n	8003028 <osSemaphoreCreate+0x42>
    if (count == 1) {
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10b      	bne.n	8003016 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	2303      	movs	r3, #3
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	2001      	movs	r0, #1
 800300e:	f000 fb87 	bl	8003720 <xQueueGenericCreateStatic>
 8003012:	4603      	mov	r3, r0
 8003014:	e023      	b.n	800305e <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8003016:	6838      	ldr	r0, [r7, #0]
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	f000 fc4f 	bl	80038c2 <xQueueCreateCountingSemaphoreStatic>
 8003024:	4603      	mov	r3, r0
 8003026:	e01a      	b.n	800305e <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d110      	bne.n	8003050 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800302e:	2203      	movs	r2, #3
 8003030:	2100      	movs	r1, #0
 8003032:	2001      	movs	r0, #1
 8003034:	f000 fbe7 	bl	8003806 <xQueueGenericCreate>
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <osSemaphoreCreate+0x66>
 8003040:	2300      	movs	r3, #0
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fca2 	bl	8003990 <xQueueGenericSend>
      return sema;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	e006      	b.n	800305e <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fc68 	bl	800392c <xQueueCreateCountingSemaphore>
 800305c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	3303      	adds	r3, #3
 8003074:	f023 0303 	bic.w	r3, r3, #3
 8003078:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800307a:	2014      	movs	r0, #20
 800307c:	f002 f9a0 	bl	80053c0 <pvPortMalloc>
 8003080:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d046      	beq.n	8003116 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 f98d 	bl	80053c0 <pvPortMalloc>
 80030a6:	4602      	mov	r2, r0
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02b      	beq.n	800310c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 f97e 	bl	80053c0 <pvPortMalloc>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d011      	beq.n	80030f6 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e008      	b.n	80030ea <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	3301      	adds	r3, #1
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d3f1      	bcc.n	80030d8 <osPoolCreate+0x72>
 80030f4:	e00f      	b.n	8003116 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fa22 	bl	8005544 <vPortFree>
        vPortFree(thePool);
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f002 fa1f 	bl	8005544 <vPortFree>
        thePool = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e004      	b.n	8003116 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f002 fa19 	bl	8005544 <vPortFree>
      thePool = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003116:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003130:	f7ff fed0 	bl	8002ed4 <inHandlerMode>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800313a:	f3ef 8211 	mrs	r2, BASEPRI
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	617a      	str	r2, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003152:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	e001      	b.n	800315c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003158:	f002 f818 	bl	800518c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	e029      	b.n	80031b6 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6892      	ldr	r2, [r2, #8]
 800316e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003172:	fb02 f201 	mul.w	r2, r2, r1
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d113      	bne.n	80031b0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
 80031a4:	440b      	add	r3, r1
 80031a6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	611a      	str	r2, [r3, #16]
      break;
 80031ae:	e007      	b.n	80031c0 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	3301      	adds	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d3d0      	bcc.n	8003162 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80031c0:	f7ff fe88 	bl	8002ed4 <inHandlerMode>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	e001      	b.n	80031da <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80031d6:	f002 f807 	bl	80051e8 <vPortExitCritical>
  }
  
  return p;
 80031da:	6a3b      	ldr	r3, [r7, #32]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <osPoolFree+0x14>
    return osErrorParameter;
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	e030      	b.n	800325a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <osPoolFree+0x1e>
    return osErrorParameter;
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	e02b      	b.n	800325a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d201      	bcs.n	8003210 <osPoolFree+0x2c>
    return osErrorParameter;
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	e024      	b.n	800325a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	fbb3 f1f2 	udiv	r1, r3, r2
 8003224:	fb02 f201 	mul.w	r2, r2, r1
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <osPoolFree+0x4e>
    return osErrorParameter;
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	e013      	b.n	800325a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d301      	bcc.n	800324c <osPoolFree+0x68>
    return osErrorParameter;
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	e006      	b.n	800325a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689c      	ldr	r4, [r3, #8]
 8003284:	200c      	movs	r0, #12
 8003286:	f002 f89b 	bl	80053c0 <pvPortMalloc>
 800328a:	4603      	mov	r3, r0
 800328c:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <osMailCreate+0x36>
    return NULL;
 8003298:	2300      	movs	r3, #0
 800329a:	e038      	b.n	800330e <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2104      	movs	r1, #4
 80032b4:	f000 faa7 	bl	8003806 <xQueueGenericCreate>
 80032b8:	4603      	mov	r3, r0
 80032ba:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 f938 	bl	8005544 <vPortFree>
    return NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e01a      	b.n	800330e <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	681c      	ldr	r4, [r3, #0]
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff febf 	bl	8003066 <osPoolCreate>
 80032e8:	4603      	mov	r3, r0
 80032ea:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 f920 	bl	8005544 <vPortFree>
    return NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	e002      	b.n	800330e <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800330e:	4618      	mov	r0, r3
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd90      	pop	{r4, r7, pc}

08003316 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <osMailAlloc+0x14>
    return NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	e006      	b.n	8003338 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fef6 	bl	8003120 <osPoolAlloc>
 8003334:	60f8      	str	r0, [r7, #12]
  
  return p;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <osMailPut+0x14>
    return osErrorParameter;
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	e02c      	b.n	80033ae <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8003358:	f7ff fdbc 	bl	8002ed4 <inHandlerMode>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6858      	ldr	r0, [r3, #4]
 8003366:	f107 020c 	add.w	r2, r7, #12
 800336a:	4639      	mov	r1, r7
 800336c:	2300      	movs	r3, #0
 800336e:	f000 fc09 	bl	8003b84 <xQueueGenericSendFromISR>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d001      	beq.n	800337c <osMailPut+0x3c>
      return osErrorOS;
 8003378:	23ff      	movs	r3, #255	; 0xff
 800337a:	e018      	b.n	80033ae <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <osMailPut+0x6c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <osMailPut+0x78>)
 8003384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	e00b      	b.n	80033ac <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6858      	ldr	r0, [r3, #4]
 8003398:	4639      	mov	r1, r7
 800339a:	2300      	movs	r3, #0
 800339c:	2200      	movs	r2, #0
 800339e:	f000 faf7 	bl	8003990 <xQueueGenericSend>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d001      	beq.n	80033ac <osMailPut+0x6c>
      return osErrorOS;
 80033a8:	23ff      	movs	r3, #255	; 0xff
 80033aa:	e000      	b.n	80033ae <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b08b      	sub	sp, #44	; 0x2c
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	617b      	str	r3, [r7, #20]
    return event;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	461c      	mov	r4, r3
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033e6:	e056      	b.n	8003496 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d103      	bne.n	8003400 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e009      	b.n	8003414 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <osMailGet+0x58>
      ticks = 1;
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003414:	f7ff fd5e 	bl	8002ed4 <inHandlerMode>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01d      	beq.n	800345a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6858      	ldr	r0, [r3, #4]
 8003422:	f107 0220 	add.w	r2, r7, #32
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	f000 fd19 	bl	8003e64 <xQueueReceiveFromISR>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8003438:	2320      	movs	r3, #32
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e001      	b.n	8003442 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01e      	beq.n	8003486 <osMailGet+0xca>
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <osMailGet+0xe4>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	e015      	b.n	8003486 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6858      	ldr	r0, [r3, #4]
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	3304      	adds	r3, #4
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	4619      	mov	r1, r3
 8003468:	f000 fc20 	bl	8003cac <xQueueReceive>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8003472:	2320      	movs	r3, #32
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e006      	b.n	8003486 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <osMailGet+0xc6>
 800347e:	2300      	movs	r3, #0
 8003480:	e000      	b.n	8003484 <osMailGet+0xc8>
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	461c      	mov	r4, r3
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	372c      	adds	r7, #44	; 0x2c
 800349a:	46bd      	mov	sp, r7
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <osMailFree+0x14>
    return osErrorParameter;
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	e006      	b.n	80034c6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fe90 	bl	80031e4 <osPoolFree>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 80034d8:	2381      	movs	r3, #129	; 0x81
#endif
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f103 0208 	add.w	r2, r3, #8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f04f 32ff 	mov.w	r2, #4294967295
 80034fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f103 0208 	add.w	r2, r3, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 0208 	add.w	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d103      	bne.n	80035a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e00c      	b.n	80035c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3308      	adds	r3, #8
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e002      	b.n	80035b6 <vListInsert+0x2e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d2f6      	bcs.n	80035b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6852      	ldr	r2, [r2, #4]
 800361a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d103      	bne.n	800362e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <xQueueGenericReset+0x28>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	e7fe      	b.n	8003676 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003678:	f001 fd88 	bl	800518c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	441a      	add	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	3b01      	subs	r3, #1
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d114      	bne.n	80036f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01a      	beq.n	800370c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3310      	adds	r3, #16
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 f972 	bl	80049c4 <xTaskRemoveFromEventList>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <xQueueGenericReset+0xcc>)
 80036e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	e009      	b.n	800370c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3310      	adds	r3, #16
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fef2 	bl	80034e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3324      	adds	r3, #36	; 0x24
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff feed 	bl	80034e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800370c:	f001 fd6c 	bl	80051e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003710:	2301      	movs	r3, #1
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <xQueueGenericCreateStatic+0x28>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
 8003746:	e7fe      	b.n	8003746 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <xQueueGenericCreateStatic+0x42>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <xQueueGenericCreateStatic+0x4e>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <xQueueGenericCreateStatic+0x52>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <xQueueGenericCreateStatic+0x54>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <xQueueGenericCreateStatic+0x6c>
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	e7fe      	b.n	800378a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <xQueueGenericCreateStatic+0x78>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <xQueueGenericCreateStatic+0x7c>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <xQueueGenericCreateStatic+0x7e>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <xQueueGenericCreateStatic+0x96>
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	e7fe      	b.n	80037b4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037b6:	2348      	movs	r3, #72	; 0x48
 80037b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b48      	cmp	r3, #72	; 0x48
 80037be:	d009      	beq.n	80037d4 <xQueueGenericCreateStatic+0xb4>
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e7fe      	b.n	80037d2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f844 	bl	8003884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037fe:	4618      	mov	r0, r3
 8003800:	3730      	adds	r7, #48	; 0x30
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08a      	sub	sp, #40	; 0x28
 800380a:	af02      	add	r7, sp, #8
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <xQueueGenericCreate+0x28>
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e7fe      	b.n	800382c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	e004      	b.n	8003844 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3348      	adds	r3, #72	; 0x48
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fdb9 	bl	80053c0 <pvPortMalloc>
 800384e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d011      	beq.n	800387a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3348      	adds	r3, #72	; 0x48
 800385e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003868:	79fa      	ldrb	r2, [r7, #7]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f805 	bl	8003884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800387a:	69bb      	ldr	r3, [r7, #24]
	}
 800387c:	4618      	mov	r0, r3
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e002      	b.n	80038a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038b2:	2101      	movs	r1, #1
 80038b4:	69b8      	ldr	r0, [r7, #24]
 80038b6:	f7ff fecb 	bl	8003650 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08a      	sub	sp, #40	; 0x28
 80038c6:	af02      	add	r7, sp, #8
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <xQueueCreateCountingSemaphoreStatic+0x26>
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	e7fe      	b.n	80038e6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d909      	bls.n	8003904 <xQueueCreateCountingSemaphoreStatic+0x42>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e7fe      	b.n	8003902 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003904:	2302      	movs	r3, #2
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff06 	bl	8003720 <xQueueGenericCreateStatic>
 8003914:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003922:	69fb      	ldr	r3, [r7, #28]
	}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <xQueueCreateCountingSemaphore+0x24>
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	e7fe      	b.n	800394e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d909      	bls.n	800396c <xQueueCreateCountingSemaphore+0x40>
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e7fe      	b.n	800396a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800396c:	2202      	movs	r2, #2
 800396e:	2100      	movs	r1, #0
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff48 	bl	8003806 <xQueueGenericCreate>
 8003976:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003984:	697b      	ldr	r3, [r7, #20]
	}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08e      	sub	sp, #56	; 0x38
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <xQueueGenericSend+0x30>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039be:	e7fe      	b.n	80039be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <xQueueGenericSend+0x3e>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <xQueueGenericSend+0x42>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <xQueueGenericSend+0x44>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <xQueueGenericSend+0x5c>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	e7fe      	b.n	80039ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d103      	bne.n	80039fa <xQueueGenericSend+0x6a>
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <xQueueGenericSend+0x6e>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueGenericSend+0x70>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <xQueueGenericSend+0x88>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	e7fe      	b.n	8003a16 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a18:	f001 f98a 	bl	8004d30 <xTaskGetSchedulerState>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <xQueueGenericSend+0x98>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <xQueueGenericSend+0x9c>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <xQueueGenericSend+0x9e>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <xQueueGenericSend+0xb6>
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	e7fe      	b.n	8003a44 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a46:	f001 fba1 	bl	800518c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <xQueueGenericSend+0xcc>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d129      	bne.n	8003ab0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a62:	f000 fa7c 	bl	8003f5e <prvCopyDataToQueue>
 8003a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	3324      	adds	r3, #36	; 0x24
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 ffa5 	bl	80049c4 <xTaskRemoveFromEventList>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <xQueueGenericSend+0x1f0>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	e00a      	b.n	8003aa8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a98:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <xQueueGenericSend+0x1f0>)
 8003a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003aa8:	f001 fb9e 	bl	80051e8 <vPortExitCritical>
				return pdPASS;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e063      	b.n	8003b78 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ab6:	f001 fb97 	bl	80051e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e05c      	b.n	8003b78 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 ffdd 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ad2:	f001 fb89 	bl	80051e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ad6:	f000 fd73 	bl	80045c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ada:	f001 fb57 	bl	800518c <vPortEnterCritical>
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d103      	bne.n	8003af4 <xQueueGenericSend+0x164>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d103      	bne.n	8003b0a <xQueueGenericSend+0x17a>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b0a:	f001 fb6d 	bl	80051e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b0e:	1d3a      	adds	r2, r7, #4
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 ffcc 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d124      	bne.n	8003b6c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b24:	f000 fb13 	bl	800414e <prvIsQueueFull>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	3310      	adds	r3, #16
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 ff20 	bl	800497c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3e:	f000 fa9e 	bl	800407e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b42:	f000 fd4b 	bl	80045dc <xTaskResumeAll>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f af7c 	bne.w	8003a46 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <xQueueGenericSend+0x1f0>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	e772      	b.n	8003a46 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b62:	f000 fa8c 	bl	800407e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b66:	f000 fd39 	bl	80045dc <xTaskResumeAll>
 8003b6a:	e76c      	b.n	8003a46 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b6e:	f000 fa86 	bl	800407e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b72:	f000 fd33 	bl	80045dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3738      	adds	r7, #56	; 0x38
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08e      	sub	sp, #56	; 0x38
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <xQueueGenericSendFromISR+0x2c>
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e7fe      	b.n	8003bae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <xQueueGenericSendFromISR+0x3a>
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <xQueueGenericSendFromISR+0x3e>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <xQueueGenericSendFromISR+0x40>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <xQueueGenericSendFromISR+0x58>
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	e7fe      	b.n	8003bda <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d103      	bne.n	8003bea <xQueueGenericSendFromISR+0x66>
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <xQueueGenericSendFromISR+0x6a>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueGenericSendFromISR+0x6c>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d109      	bne.n	8003c08 <xQueueGenericSendFromISR+0x84>
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e7fe      	b.n	8003c06 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c08:	f001 fb9c 	bl	8005344 <vPortValidateInterruptPriority>
	__asm volatile
 8003c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61ba      	str	r2, [r7, #24]
 8003c22:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <xQueueGenericSendFromISR+0xb6>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d12c      	bne.n	8003c94 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4a:	f000 f988 	bl	8003f5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d112      	bne.n	8003c7e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d016      	beq.n	8003c8e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	3324      	adds	r3, #36	; 0x24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fead 	bl	80049c4 <xTaskRemoveFromEventList>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e007      	b.n	8003c8e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c92:	e001      	b.n	8003c98 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3738      	adds	r7, #56	; 0x38
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08c      	sub	sp, #48	; 0x30
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <xQueueReceive+0x2e>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0x3c>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueReceive+0x40>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <xQueueReceive+0x42>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <xQueueReceive+0x5a>
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e7fe      	b.n	8003d04 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d06:	f001 f813 	bl	8004d30 <xTaskGetSchedulerState>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <xQueueReceive+0x6a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <xQueueReceive+0x6e>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <xQueueReceive+0x70>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <xQueueReceive+0x88>
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e7fe      	b.n	8003d32 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d34:	f001 fa2a 	bl	800518c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01f      	beq.n	8003d84 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d48:	f000 f973 	bl	8004032 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00f      	beq.n	8003d7c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	3310      	adds	r3, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fe2f 	bl	80049c4 <xTaskRemoveFromEventList>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <xQueueReceive+0x1b4>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d7c:	f001 fa34 	bl	80051e8 <vPortExitCritical>
				return pdPASS;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e069      	b.n	8003e58 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d8a:	f001 fa2d 	bl	80051e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e062      	b.n	8003e58 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d98:	f107 0310 	add.w	r3, r7, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fe73 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da6:	f001 fa1f 	bl	80051e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003daa:	f000 fc09 	bl	80045c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dae:	f001 f9ed 	bl	800518c <vPortEnterCritical>
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d103      	bne.n	8003dc8 <xQueueReceive+0x11c>
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d103      	bne.n	8003dde <xQueueReceive+0x132>
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dde:	f001 fa03 	bl	80051e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de2:	1d3a      	adds	r2, r7, #4
 8003de4:	f107 0310 	add.w	r3, r7, #16
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fe62 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d123      	bne.n	8003e3e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df8:	f000 f993 	bl	8004122 <prvIsQueueEmpty>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d017      	beq.n	8003e32 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	3324      	adds	r3, #36	; 0x24
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fdb6 	bl	800497c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e12:	f000 f934 	bl	800407e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e16:	f000 fbe1 	bl	80045dc <xTaskResumeAll>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d189      	bne.n	8003d34 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <xQueueReceive+0x1b4>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	e780      	b.n	8003d34 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e34:	f000 f923 	bl	800407e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e38:	f000 fbd0 	bl	80045dc <xTaskResumeAll>
 8003e3c:	e77a      	b.n	8003d34 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e40:	f000 f91d 	bl	800407e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e44:	f000 fbca 	bl	80045dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4a:	f000 f96a 	bl	8004122 <prvIsQueueEmpty>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f43f af6f 	beq.w	8003d34 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3730      	adds	r7, #48	; 0x30
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	; 0x38
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <xQueueReceiveFromISR+0x2a>
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	e7fe      	b.n	8003e8c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <xQueueReceiveFromISR+0x38>
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <xQueueReceiveFromISR+0x3c>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <xQueueReceiveFromISR+0x3e>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <xQueueReceiveFromISR+0x56>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e7fe      	b.n	8003eb8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eba:	f001 fa43 	bl	8005344 <vPortValidateInterruptPriority>
	__asm volatile
 8003ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	61ba      	str	r2, [r7, #24]
 8003ed4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ed6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d02f      	beq.n	8003f46 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ef4:	f000 f89d 	bl	8004032 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d112      	bne.n	8003f30 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	3310      	adds	r3, #16
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fd54 	bl	80049c4 <xTaskRemoveFromEventList>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f34:	3301      	adds	r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	b25a      	sxtb	r2, r3
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003f40:	2301      	movs	r3, #1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
 8003f44:	e001      	b.n	8003f4a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3738      	adds	r7, #56	; 0x38
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10d      	bne.n	8003f98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d14d      	bne.n	8004020 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 feef 	bl	8004d6c <xTaskPriorityDisinherit>
 8003f8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	e043      	b.n	8004020 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d119      	bne.n	8003fd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6858      	ldr	r0, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	f001 fc12 	bl	80057d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d32b      	bcc.n	8004020 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	e026      	b.n	8004020 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68d8      	ldr	r0, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	f001 fbf8 	bl	80057d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	425b      	negs	r3, r3
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d207      	bcs.n	800400e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	425b      	negs	r3, r3
 8004008:	441a      	add	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d105      	bne.n	8004020 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3b01      	subs	r3, #1
 800401e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004028:	697b      	ldr	r3, [r7, #20]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d018      	beq.n	8004076 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d303      	bcc.n	8004066 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68d9      	ldr	r1, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	461a      	mov	r2, r3
 8004070:	6838      	ldr	r0, [r7, #0]
 8004072:	f001 fbae 	bl	80057d2 <memcpy>
	}
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004086:	f001 f881 	bl	800518c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004090:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004092:	e011      	b.n	80040b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fc8f 	bl	80049c4 <xTaskRemoveFromEventList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040ac:	f000 fd62 	bl	8004b74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dce9      	bgt.n	8004094 <prvUnlockQueue+0x16>
 80040c0:	e000      	b.n	80040c4 <prvUnlockQueue+0x46>
					break;
 80040c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040cc:	f001 f88c 	bl	80051e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040d0:	f001 f85c 	bl	800518c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040dc:	e011      	b.n	8004102 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3310      	adds	r3, #16
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fc6a 	bl	80049c4 <xTaskRemoveFromEventList>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040f6:	f000 fd3d 	bl	8004b74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004106:	2b00      	cmp	r3, #0
 8004108:	dce9      	bgt.n	80040de <prvUnlockQueue+0x60>
 800410a:	e000      	b.n	800410e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800410c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004116:	f001 f867 	bl	80051e8 <vPortExitCritical>
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800412a:	f001 f82f 	bl	800518c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e001      	b.n	8004140 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004140:	f001 f852 	bl	80051e8 <vPortExitCritical>

	return xReturn;
 8004144:	68fb      	ldr	r3, [r7, #12]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004156:	f001 f819 	bl	800518c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	429a      	cmp	r2, r3
 8004164:	d102      	bne.n	800416c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004166:	2301      	movs	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e001      	b.n	8004170 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004170:	f001 f83a 	bl	80051e8 <vPortExitCritical>

	return xReturn;
 8004174:	68fb      	ldr	r3, [r7, #12]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08e      	sub	sp, #56	; 0x38
 8004182:	af04      	add	r7, sp, #16
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <xTaskCreateStatic+0x28>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	e7fe      	b.n	80041a4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <xTaskCreateStatic+0x42>
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e7fe      	b.n	80041be <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041c0:	2354      	movs	r3, #84	; 0x54
 80041c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b54      	cmp	r3, #84	; 0x54
 80041c8:	d009      	beq.n	80041de <xTaskCreateStatic+0x60>
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e7fe      	b.n	80041dc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01e      	beq.n	8004224 <xTaskCreateStatic+0xa6>
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041fe:	2300      	movs	r3, #0
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	f107 0314 	add.w	r3, r7, #20
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f850 	bl	80042bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800421c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421e:	f000 f8d3 	bl	80043c8 <prvAddNewTaskToReadyList>
 8004222:	e001      	b.n	8004228 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004228:	697b      	ldr	r3, [r7, #20]
	}
 800422a:	4618      	mov	r0, r3
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08c      	sub	sp, #48	; 0x30
 8004236:	af04      	add	r7, sp, #16
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f001 f8ba 	bl	80053c0 <pvPortMalloc>
 800424c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004254:	2054      	movs	r0, #84	; 0x54
 8004256:	f001 f8b3 	bl	80053c0 <pvPortMalloc>
 800425a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
 8004268:	e005      	b.n	8004276 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800426a:	6978      	ldr	r0, [r7, #20]
 800426c:	f001 f96a 	bl	8005544 <vPortFree>
 8004270:	e001      	b.n	8004276 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	2300      	movs	r3, #0
 8004288:	9303      	str	r3, [sp, #12]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	9302      	str	r3, [sp, #8]
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f80e 	bl	80042bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a0:	69f8      	ldr	r0, [r7, #28]
 80042a2:	f000 f891 	bl	80043c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e002      	b.n	80042b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042b2:	69bb      	ldr	r3, [r7, #24]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042d4:	3b01      	subs	r3, #1
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <prvInitialiseNewTask+0x46>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e7fe      	b.n	8004300 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01f      	beq.n	8004348 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e012      	b.n	8004334 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	7819      	ldrb	r1, [r3, #0]
 8004316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	3334      	adds	r3, #52	; 0x34
 800431e:	460a      	mov	r2, r1
 8004320:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3301      	adds	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d9e9      	bls.n	800430e <prvInitialiseNewTask+0x52>
 800433a:	e000      	b.n	800433e <prvInitialiseNewTask+0x82>
			{
				break;
 800433c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004346:	e003      	b.n	8004350 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	2b06      	cmp	r3, #6
 8004354:	d901      	bls.n	800435a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004356:	2306      	movs	r3, #6
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	2200      	movs	r2, #0
 800436a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f8d8 	bl	8003526 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	3318      	adds	r3, #24
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff f8d3 	bl	8003526 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004384:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	f1c3 0207 	rsb	r2, r3, #7
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	2200      	movs	r2, #0
 800439a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	69b8      	ldr	r0, [r7, #24]
 80043aa:	f000 fdc9 	bl	8004f40 <pxPortInitialiseStack>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c0:	bf00      	nop
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043d0:	f000 fedc 	bl	800518c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <prvAddNewTaskToReadyList+0xb8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3301      	adds	r3, #1
 80043da:	4a29      	ldr	r2, [pc, #164]	; (8004480 <prvAddNewTaskToReadyList+0xb8>)
 80043dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043de:	4b29      	ldr	r3, [pc, #164]	; (8004484 <prvAddNewTaskToReadyList+0xbc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043e6:	4a27      	ldr	r2, [pc, #156]	; (8004484 <prvAddNewTaskToReadyList+0xbc>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <prvAddNewTaskToReadyList+0xb8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d110      	bne.n	8004416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043f4:	f000 fbe2 	bl	8004bbc <prvInitialiseTaskLists>
 80043f8:	e00d      	b.n	8004416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <prvAddNewTaskToReadyList+0xc0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <prvAddNewTaskToReadyList+0xbc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	429a      	cmp	r2, r3
 800440e:	d802      	bhi.n	8004416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <prvAddNewTaskToReadyList+0xbc>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <prvAddNewTaskToReadyList+0xc4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a1b      	ldr	r2, [pc, #108]	; (800448c <prvAddNewTaskToReadyList+0xc4>)
 800441e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <prvAddNewTaskToReadyList+0xc8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4313      	orrs	r3, r2
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <prvAddNewTaskToReadyList+0xc8>)
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a15      	ldr	r2, [pc, #84]	; (8004494 <prvAddNewTaskToReadyList+0xcc>)
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f7ff f879 	bl	8003540 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800444e:	f000 fecb 	bl	80051e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <prvAddNewTaskToReadyList+0xc0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00e      	beq.n	8004478 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <prvAddNewTaskToReadyList+0xbc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	429a      	cmp	r2, r3
 8004466:	d207      	bcs.n	8004478 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <prvAddNewTaskToReadyList+0xd0>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000039c 	.word	0x2000039c
 8004484:	2000029c 	.word	0x2000029c
 8004488:	200003a8 	.word	0x200003a8
 800448c:	200003b8 	.word	0x200003b8
 8004490:	200003a4 	.word	0x200003a4
 8004494:	200002a0 	.word	0x200002a0
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <vTaskDelay+0x60>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <vTaskDelay+0x2e>
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	e7fe      	b.n	80044c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044ca:	f000 f879 	bl	80045c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fccf 	bl	8004e74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044d6:	f000 f881 	bl	80045dc <xTaskResumeAll>
 80044da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <vTaskDelay+0x64>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200003c4 	.word	0x200003c4
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	; 0x28
 8004508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004512:	463a      	mov	r2, r7
 8004514:	1d39      	adds	r1, r7, #4
 8004516:	f107 0308 	add.w	r3, r7, #8
 800451a:	4618      	mov	r0, r3
 800451c:	f7fb fff8 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	9202      	str	r2, [sp, #8]
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	2300      	movs	r3, #0
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2300      	movs	r3, #0
 8004530:	460a      	mov	r2, r1
 8004532:	491d      	ldr	r1, [pc, #116]	; (80045a8 <vTaskStartScheduler+0xa4>)
 8004534:	481d      	ldr	r0, [pc, #116]	; (80045ac <vTaskStartScheduler+0xa8>)
 8004536:	f7ff fe22 	bl	800417e <xTaskCreateStatic>
 800453a:	4602      	mov	r2, r0
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <vTaskStartScheduler+0xac>)
 800453e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <vTaskStartScheduler+0xac>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e001      	b.n	8004552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d115      	bne.n	8004584 <vTaskStartScheduler+0x80>
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <vTaskStartScheduler+0xb0>)
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <vTaskStartScheduler+0xb4>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <vTaskStartScheduler+0xb8>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800457e:	f000 fd67 	bl	8005050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004582:	e00d      	b.n	80045a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d109      	bne.n	80045a0 <vTaskStartScheduler+0x9c>
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e7fe      	b.n	800459e <vTaskStartScheduler+0x9a>
}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	080058c0 	.word	0x080058c0
 80045ac:	08004b8d 	.word	0x08004b8d
 80045b0:	200003c0 	.word	0x200003c0
 80045b4:	200003bc 	.word	0x200003bc
 80045b8:	200003a8 	.word	0x200003a8
 80045bc:	200003a0 	.word	0x200003a0

080045c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <vTaskSuspendAll+0x18>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a03      	ldr	r2, [pc, #12]	; (80045d8 <vTaskSuspendAll+0x18>)
 80045cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	200003c4 	.word	0x200003c4

080045dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <xTaskResumeAll+0x114>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <xTaskResumeAll+0x2a>
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	e7fe      	b.n	8004604 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004606:	f000 fdc1 	bl	800518c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <xTaskResumeAll+0x114>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	4a37      	ldr	r2, [pc, #220]	; (80046f0 <xTaskResumeAll+0x114>)
 8004612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <xTaskResumeAll+0x114>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d161      	bne.n	80046e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800461c:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <xTaskResumeAll+0x118>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05d      	beq.n	80046e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004624:	e02e      	b.n	8004684 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004626:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <xTaskResumeAll+0x11c>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3318      	adds	r3, #24
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe ffe1 	bl	80035fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe ffdc 	bl	80035fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	2201      	movs	r2, #1
 8004648:	409a      	lsls	r2, r3
 800464a:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <xTaskResumeAll+0x120>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <xTaskResumeAll+0x120>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <xTaskResumeAll+0x124>)
 8004662:	441a      	add	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe ff68 	bl	8003540 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4b23      	ldr	r3, [pc, #140]	; (8004704 <xTaskResumeAll+0x128>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800467e:	4b22      	ldr	r3, [pc, #136]	; (8004708 <xTaskResumeAll+0x12c>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <xTaskResumeAll+0x11c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1cc      	bne.n	8004626 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004692:	f000 fb2d 	bl	8004cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <xTaskResumeAll+0x130>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f000 f859 	bl	8004758 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80046ac:	4b16      	ldr	r3, [pc, #88]	; (8004708 <xTaskResumeAll+0x12c>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f1      	bne.n	80046a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <xTaskResumeAll+0x130>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046c4:	4b10      	ldr	r3, [pc, #64]	; (8004708 <xTaskResumeAll+0x12c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <xTaskResumeAll+0x134>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e0:	f000 fd82 	bl	80051e8 <vPortExitCritical>

	return xAlreadyYielded;
 80046e4:	68bb      	ldr	r3, [r7, #8]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200003c4 	.word	0x200003c4
 80046f4:	2000039c 	.word	0x2000039c
 80046f8:	2000035c 	.word	0x2000035c
 80046fc:	200003a4 	.word	0x200003a4
 8004700:	200002a0 	.word	0x200002a0
 8004704:	2000029c 	.word	0x2000029c
 8004708:	200003b0 	.word	0x200003b0
 800470c:	200003ac 	.word	0x200003ac
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <xTaskGetTickCount+0x1c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004720:	687b      	ldr	r3, [r7, #4]
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	200003a0 	.word	0x200003a0

08004734 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800473a:	f000 fe03 	bl	8005344 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <xTaskGetTickCountFromISR+0x20>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004748:	683b      	ldr	r3, [r7, #0]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200003a0 	.word	0x200003a0

08004758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004762:	4b4e      	ldr	r3, [pc, #312]	; (800489c <xTaskIncrementTick+0x144>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 8087 	bne.w	800487a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <xTaskIncrementTick+0x148>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004774:	4a4a      	ldr	r2, [pc, #296]	; (80048a0 <xTaskIncrementTick+0x148>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11f      	bne.n	80047c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004780:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <xTaskIncrementTick+0x14c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <xTaskIncrementTick+0x46>
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	e7fe      	b.n	800479c <xTaskIncrementTick+0x44>
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	4b40      	ldr	r3, [pc, #256]	; (80048a8 <xTaskIncrementTick+0x150>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4a3e      	ldr	r2, [pc, #248]	; (80048a8 <xTaskIncrementTick+0x150>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <xTaskIncrementTick+0x154>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a3c      	ldr	r2, [pc, #240]	; (80048ac <xTaskIncrementTick+0x154>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	f000 fa98 	bl	8004cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d348      	bcc.n	800485c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	601a      	str	r2, [r3, #0]
					break;
 80047dc:	e03e      	b.n	800485c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d203      	bcs.n	80047fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047f6:	4a2e      	ldr	r2, [pc, #184]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047fc:	e02e      	b.n	800485c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fef9 	bl	80035fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3318      	adds	r3, #24
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe fef0 	bl	80035fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	2201      	movs	r2, #1
 8004820:	409a      	lsls	r2, r3
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <xTaskIncrementTick+0x15c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <xTaskIncrementTick+0x15c>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <xTaskIncrementTick+0x160>)
 800483a:	441a      	add	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe fe7c 	bl	8003540 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <xTaskIncrementTick+0x164>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d3b9      	bcc.n	80047ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485a:	e7b6      	b.n	80047ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <xTaskIncrementTick+0x164>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4915      	ldr	r1, [pc, #84]	; (80048b8 <xTaskIncrementTick+0x160>)
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d907      	bls.n	8004884 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e004      	b.n	8004884 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800487a:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <xTaskIncrementTick+0x168>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <xTaskIncrementTick+0x168>)
 8004882:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004890:	697b      	ldr	r3, [r7, #20]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200003c4 	.word	0x200003c4
 80048a0:	200003a0 	.word	0x200003a0
 80048a4:	20000354 	.word	0x20000354
 80048a8:	20000358 	.word	0x20000358
 80048ac:	200003b4 	.word	0x200003b4
 80048b0:	200003bc 	.word	0x200003bc
 80048b4:	200003a4 	.word	0x200003a4
 80048b8:	200002a0 	.word	0x200002a0
 80048bc:	2000029c 	.word	0x2000029c
 80048c0:	200003ac 	.word	0x200003ac
 80048c4:	200003b0 	.word	0x200003b0

080048c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <vTaskSwitchContext+0xa0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048d6:	4b25      	ldr	r3, [pc, #148]	; (800496c <vTaskSwitchContext+0xa4>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048dc:	e03e      	b.n	800495c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80048de:	4b23      	ldr	r3, [pc, #140]	; (800496c <vTaskSwitchContext+0xa4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e4:	4b22      	ldr	r3, [pc, #136]	; (8004970 <vTaskSwitchContext+0xa8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	fab3 f383 	clz	r3, r3
 80048f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048f2:	7afb      	ldrb	r3, [r7, #11]
 80048f4:	f1c3 031f 	rsb	r3, r3, #31
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	491e      	ldr	r1, [pc, #120]	; (8004974 <vTaskSwitchContext+0xac>)
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <vTaskSwitchContext+0x5a>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	e7fe      	b.n	8004920 <vTaskSwitchContext+0x58>
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a11      	ldr	r2, [pc, #68]	; (8004974 <vTaskSwitchContext+0xac>)
 800492e:	4413      	add	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3308      	adds	r3, #8
 8004944:	429a      	cmp	r2, r3
 8004946:	d104      	bne.n	8004952 <vTaskSwitchContext+0x8a>
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a07      	ldr	r2, [pc, #28]	; (8004978 <vTaskSwitchContext+0xb0>)
 800495a:	6013      	str	r3, [r2, #0]
}
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	200003c4 	.word	0x200003c4
 800496c:	200003b0 	.word	0x200003b0
 8004970:	200003a4 	.word	0x200003a4
 8004974:	200002a0 	.word	0x200002a0
 8004978:	2000029c 	.word	0x2000029c

0800497c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <vTaskPlaceOnEventList+0x24>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	e7fe      	b.n	800499e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <vTaskPlaceOnEventList+0x44>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3318      	adds	r3, #24
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fe fded 	bl	8003588 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049ae:	2101      	movs	r1, #1
 80049b0:	6838      	ldr	r0, [r7, #0]
 80049b2:	f000 fa5f 	bl	8004e74 <prvAddCurrentTaskToDelayedList>
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000029c 	.word	0x2000029c

080049c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <xTaskRemoveFromEventList+0x2a>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e7fe      	b.n	80049ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3318      	adds	r3, #24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe fe01 	bl	80035fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <xTaskRemoveFromEventList+0xac>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11c      	bne.n	8004a3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fdf8 	bl	80035fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	409a      	lsls	r2, r3
 8004a12:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <xTaskRemoveFromEventList+0xb0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <xTaskRemoveFromEventList+0xb0>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <xTaskRemoveFromEventList+0xb4>)
 8004a2a:	441a      	add	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe fd84 	bl	8003540 <vListInsertEnd>
 8004a38:	e005      	b.n	8004a46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	480e      	ldr	r0, [pc, #56]	; (8004a7c <xTaskRemoveFromEventList+0xb8>)
 8004a42:	f7fe fd7d 	bl	8003540 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <xTaskRemoveFromEventList+0xbc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d905      	bls.n	8004a60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <xTaskRemoveFromEventList+0xc0>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e001      	b.n	8004a64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a64:	697b      	ldr	r3, [r7, #20]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200003c4 	.word	0x200003c4
 8004a74:	200003a4 	.word	0x200003a4
 8004a78:	200002a0 	.word	0x200002a0
 8004a7c:	2000035c 	.word	0x2000035c
 8004a80:	2000029c 	.word	0x2000029c
 8004a84:	200003b0 	.word	0x200003b0

08004a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTaskInternalSetTimeOutState+0x24>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <vTaskInternalSetTimeOutState+0x28>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	200003b4 	.word	0x200003b4
 8004ab0:	200003a0 	.word	0x200003a0

08004ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <xTaskCheckForTimeOut+0x24>
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e7fe      	b.n	8004ad6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <xTaskCheckForTimeOut+0x3e>
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e7fe      	b.n	8004af0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004af2:	f000 fb4b 	bl	800518c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <xTaskCheckForTimeOut+0xb8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d102      	bne.n	8004b16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e023      	b.n	8004b5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <xTaskCheckForTimeOut+0xbc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d007      	beq.n	8004b32 <xTaskCheckForTimeOut+0x7e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d302      	bcc.n	8004b32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	e015      	b.n	8004b5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d20b      	bcs.n	8004b54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	1ad2      	subs	r2, r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff9d 	bl	8004a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	e004      	b.n	8004b5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f000 fb43 	bl	80051e8 <vPortExitCritical>

	return xReturn;
 8004b62:	69fb      	ldr	r3, [r7, #28]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200003a0 	.word	0x200003a0
 8004b70:	200003b4 	.word	0x200003b4

08004b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <vTaskMissedYield+0x14>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	200003b0 	.word	0x200003b0

08004b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b94:	f000 f852 	bl	8004c3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <prvIdleTask+0x28>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d9f9      	bls.n	8004b94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <prvIdleTask+0x2c>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bb0:	e7f0      	b.n	8004b94 <prvIdleTask+0x8>
 8004bb2:	bf00      	nop
 8004bb4:	200002a0 	.word	0x200002a0
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e00c      	b.n	8004be2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <prvInitialiseTaskLists+0x60>)
 8004bd4:	4413      	add	r3, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fc85 	bl	80034e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d9ef      	bls.n	8004bc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004be8:	480d      	ldr	r0, [pc, #52]	; (8004c20 <prvInitialiseTaskLists+0x64>)
 8004bea:	f7fe fc7c 	bl	80034e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bee:	480d      	ldr	r0, [pc, #52]	; (8004c24 <prvInitialiseTaskLists+0x68>)
 8004bf0:	f7fe fc79 	bl	80034e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bf4:	480c      	ldr	r0, [pc, #48]	; (8004c28 <prvInitialiseTaskLists+0x6c>)
 8004bf6:	f7fe fc76 	bl	80034e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bfa:	480c      	ldr	r0, [pc, #48]	; (8004c2c <prvInitialiseTaskLists+0x70>)
 8004bfc:	f7fe fc73 	bl	80034e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c00:	480b      	ldr	r0, [pc, #44]	; (8004c30 <prvInitialiseTaskLists+0x74>)
 8004c02:	f7fe fc70 	bl	80034e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <prvInitialiseTaskLists+0x78>)
 8004c08:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <prvInitialiseTaskLists+0x64>)
 8004c0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <prvInitialiseTaskLists+0x7c>)
 8004c0e:	4a05      	ldr	r2, [pc, #20]	; (8004c24 <prvInitialiseTaskLists+0x68>)
 8004c10:	601a      	str	r2, [r3, #0]
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200002a0 	.word	0x200002a0
 8004c20:	2000032c 	.word	0x2000032c
 8004c24:	20000340 	.word	0x20000340
 8004c28:	2000035c 	.word	0x2000035c
 8004c2c:	20000370 	.word	0x20000370
 8004c30:	20000388 	.word	0x20000388
 8004c34:	20000354 	.word	0x20000354
 8004c38:	20000358 	.word	0x20000358

08004c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c42:	e019      	b.n	8004c78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c44:	f000 faa2 	bl	800518c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <prvCheckTasksWaitingTermination+0x4c>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe fcd0 	bl	80035fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <prvCheckTasksWaitingTermination+0x50>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <prvCheckTasksWaitingTermination+0x50>)
 8004c62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvCheckTasksWaitingTermination+0x54>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <prvCheckTasksWaitingTermination+0x54>)
 8004c6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c6e:	f000 fabb 	bl	80051e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f80e 	bl	8004c94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <prvCheckTasksWaitingTermination+0x54>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e1      	bne.n	8004c44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000370 	.word	0x20000370
 8004c8c:	2000039c 	.word	0x2000039c
 8004c90:	20000384 	.word	0x20000384

08004c94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fc4a 	bl	8005544 <vPortFree>
				vPortFree( pxTCB );
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fc47 	bl	8005544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cb6:	e017      	b.n	8004ce8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d103      	bne.n	8004cca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fc3e 	bl	8005544 <vPortFree>
	}
 8004cc8:	e00e      	b.n	8004ce8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d009      	beq.n	8004ce8 <prvDeleteTCB+0x54>
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e7fe      	b.n	8004ce6 <prvDeleteTCB+0x52>
	}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <prvResetNextTaskUnblockTime+0x38>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvResetNextTaskUnblockTime+0x3c>)
 8004d02:	f04f 32ff 	mov.w	r2, #4294967295
 8004d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d08:	e008      	b.n	8004d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0a:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <prvResetNextTaskUnblockTime+0x38>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <prvResetNextTaskUnblockTime+0x3c>)
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000354 	.word	0x20000354
 8004d2c:	200003bc 	.word	0x200003bc

08004d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <xTaskGetSchedulerState+0x34>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	e008      	b.n	8004d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <xTaskGetSchedulerState+0x38>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	e001      	b.n	8004d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d56:	687b      	ldr	r3, [r7, #4]
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	200003a8 	.word	0x200003a8
 8004d68:	200003c4 	.word	0x200003c4

08004d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d06c      	beq.n	8004e5c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d82:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <xTaskPriorityDisinherit+0xfc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d009      	beq.n	8004da0 <xTaskPriorityDisinherit+0x34>
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e7fe      	b.n	8004d9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <xTaskPriorityDisinherit+0x50>
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	e7fe      	b.n	8004dba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d044      	beq.n	8004e5c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d140      	bne.n	8004e5c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fc0b 	bl	80035fa <uxListRemove>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d115      	bne.n	8004e16 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dee:	491f      	ldr	r1, [pc, #124]	; (8004e6c <xTaskPriorityDisinherit+0x100>)
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <xTaskPriorityDisinherit+0xaa>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <xTaskPriorityDisinherit+0x104>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4013      	ands	r3, r2
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <xTaskPriorityDisinherit+0x104>)
 8004e14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f1c3 0207 	rsb	r2, r3, #7
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	2201      	movs	r2, #1
 8004e30:	409a      	lsls	r2, r3
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <xTaskPriorityDisinherit+0x104>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <xTaskPriorityDisinherit+0x104>)
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <xTaskPriorityDisinherit+0x100>)
 8004e4a:	441a      	add	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7fe fb74 	bl	8003540 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e5c:	697b      	ldr	r3, [r7, #20]
	}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000029c 	.word	0x2000029c
 8004e6c:	200002a0 	.word	0x200002a0
 8004e70:	200003a4 	.word	0x200003a4

08004e74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e84:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fbb5 	bl	80035fa <uxListRemove>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d10a      	bne.n	8004ecc <prvAddCurrentTaskToDelayedList+0x58>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	481a      	ldr	r0, [pc, #104]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ec6:	f7fe fb3b 	bl	8003540 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eca:	e026      	b.n	8004f1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d209      	bcs.n	8004ef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f7fe fb49 	bl	8003588 <vListInsert>
}
 8004ef6:	e010      	b.n	8004f1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f7fe fb3f 	bl	8003588 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d202      	bcs.n	8004f1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f14:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6013      	str	r3, [r2, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200003a0 	.word	0x200003a0
 8004f28:	2000029c 	.word	0x2000029c
 8004f2c:	200003a4 	.word	0x200003a4
 8004f30:	20000388 	.word	0x20000388
 8004f34:	20000358 	.word	0x20000358
 8004f38:	20000354 	.word	0x20000354
 8004f3c:	200003bc 	.word	0x200003bc

08004f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b04      	subs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f70:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <pxPortInitialiseStack+0x64>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b14      	subs	r3, #20
 8004f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f06f 0202 	mvn.w	r2, #2
 8004f8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3b20      	subs	r3, #32
 8004f94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	08004fa9 	.word	0x08004fa9

08004fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <prvTaskExitError+0x50>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d009      	beq.n	8004fd0 <prvTaskExitError+0x28>
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e7fe      	b.n	8004fce <prvTaskExitError+0x26>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fe2:	bf00      	nop
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0fc      	beq.n	8004fe4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000010 	.word	0x20000010
 8004ffc:	00000000 	.word	0x00000000

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	4770      	bx	lr
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst2>:
 8005020:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005028:	4808      	ldr	r0, [pc, #32]	; (800504c <prvPortStartFirstTask+0x24>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8814 	msr	CONTROL, r0
 800503a:	b662      	cpsie	i
 800503c:	b661      	cpsie	f
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	df00      	svc	0
 8005048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800504a:	bf00      	nop
 800504c:	e000ed08 	.word	0xe000ed08

08005050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005056:	4b44      	ldr	r3, [pc, #272]	; (8005168 <xPortStartScheduler+0x118>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <xPortStartScheduler+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d109      	bne.n	8005074 <xPortStartScheduler+0x24>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e7fe      	b.n	8005072 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005074:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <xPortStartScheduler+0x118>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <xPortStartScheduler+0x120>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d109      	bne.n	8005092 <xPortStartScheduler+0x42>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e7fe      	b.n	8005090 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005092:	4b38      	ldr	r3, [pc, #224]	; (8005174 <xPortStartScheduler+0x124>)
 8005094:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <xPortStartScheduler+0x128>)
 80050b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ba:	4b30      	ldr	r3, [pc, #192]	; (800517c <xPortStartScheduler+0x12c>)
 80050bc:	2207      	movs	r2, #7
 80050be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050c0:	e009      	b.n	80050d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <xPortStartScheduler+0x12c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a2c      	ldr	r2, [pc, #176]	; (800517c <xPortStartScheduler+0x12c>)
 80050ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d0ef      	beq.n	80050c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <xPortStartScheduler+0x12c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1c3 0307 	rsb	r3, r3, #7
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d009      	beq.n	8005102 <xPortStartScheduler+0xb2>
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	e7fe      	b.n	8005100 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <xPortStartScheduler+0x12c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <xPortStartScheduler+0x12c>)
 800510a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800510c:	4b1b      	ldr	r3, [pc, #108]	; (800517c <xPortStartScheduler+0x12c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <xPortStartScheduler+0x12c>)
 8005116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <xPortStartScheduler+0x130>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a16      	ldr	r2, [pc, #88]	; (8005180 <xPortStartScheduler+0x130>)
 8005126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800512a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <xPortStartScheduler+0x130>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <xPortStartScheduler+0x130>)
 8005132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005138:	f000 f8d6 	bl	80052e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <xPortStartScheduler+0x134>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005142:	f000 f8f5 	bl	8005330 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <xPortStartScheduler+0x138>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a0f      	ldr	r2, [pc, #60]	; (8005188 <xPortStartScheduler+0x138>)
 800514c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005152:	f7ff ff69 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005156:	f7ff fbb7 	bl	80048c8 <vTaskSwitchContext>
	prvTaskExitError();
 800515a:	f7ff ff25 	bl	8004fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	e000ed00 	.word	0xe000ed00
 800516c:	410fc271 	.word	0x410fc271
 8005170:	410fc270 	.word	0x410fc270
 8005174:	e000e400 	.word	0xe000e400
 8005178:	200003c8 	.word	0x200003c8
 800517c:	200003cc 	.word	0x200003cc
 8005180:	e000ed20 	.word	0xe000ed20
 8005184:	20000010 	.word	0x20000010
 8005188:	e000ef34 	.word	0xe000ef34

0800518c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051a4:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <vPortEnterCritical+0x54>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <vPortEnterCritical+0x54>)
 80051ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <vPortEnterCritical+0x54>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d10e      	bne.n	80051d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortEnterCritical+0x58>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <vPortEnterCritical+0x48>
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	e7fe      	b.n	80051d2 <vPortEnterCritical+0x46>
	}
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20000010 	.word	0x20000010
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <vPortExitCritical+0x4c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <vPortExitCritical+0x22>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	e7fe      	b.n	8005208 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <vPortExitCritical+0x4c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3b01      	subs	r3, #1
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <vPortExitCritical+0x4c>)
 8005212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <vPortExitCritical+0x4c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <vPortExitCritical+0x3e>
 800521c:	2300      	movs	r3, #0
 800521e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000010 	.word	0x20000010
	...

08005240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005240:	f3ef 8009 	mrs	r0, PSP
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <pxCurrentTCBConst>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f01e 0f10 	tst.w	lr, #16
 8005250:	bf08      	it	eq
 8005252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005264:	f380 8811 	msr	BASEPRI, r0
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f7ff fb2a 	bl	80048c8 <vTaskSwitchContext>
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f380 8811 	msr	BASEPRI, r0
 800527c:	bc09      	pop	{r0, r3}
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	6808      	ldr	r0, [r1, #0]
 8005282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005286:	f01e 0f10 	tst.w	lr, #16
 800528a:	bf08      	it	eq
 800528c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005290:	f380 8809 	msr	PSP, r0
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst>:
 80052a0:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052c0:	f7ff fa4a 	bl	8004758 <xTaskIncrementTick>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <SysTick_Handler+0x3c>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <vPortSetupTimerInterrupt+0x34>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <vPortSetupTimerInterrupt+0x38>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <vPortSetupTimerInterrupt+0x3c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <vPortSetupTimerInterrupt+0x40>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <vPortSetupTimerInterrupt+0x44>)
 8005306:	3b01      	subs	r3, #1
 8005308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <vPortSetupTimerInterrupt+0x34>)
 800530c:	2207      	movs	r2, #7
 800530e:	601a      	str	r2, [r3, #0]
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000e010 	.word	0xe000e010
 8005320:	e000e018 	.word	0xe000e018
 8005324:	20000000 	.word	0x20000000
 8005328:	10624dd3 	.word	0x10624dd3
 800532c:	e000e014 	.word	0xe000e014

08005330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005340 <vPortEnableVFP+0x10>
 8005334:	6801      	ldr	r1, [r0, #0]
 8005336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800533a:	6001      	str	r1, [r0, #0]
 800533c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800533e:	bf00      	nop
 8005340:	e000ed88 	.word	0xe000ed88

08005344 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800534a:	f3ef 8305 	mrs	r3, IPSR
 800534e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d913      	bls.n	800537e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <vPortValidateInterruptPriority+0x6c>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <vPortValidateInterruptPriority+0x70>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	7afa      	ldrb	r2, [r7, #11]
 8005366:	429a      	cmp	r2, r3
 8005368:	d209      	bcs.n	800537e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	e7fe      	b.n	800537c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortValidateInterruptPriority+0x74>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <vPortValidateInterruptPriority+0x78>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d909      	bls.n	80053a2 <vPortValidateInterruptPriority+0x5e>
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	e7fe      	b.n	80053a0 <vPortValidateInterruptPriority+0x5c>
	}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e3f0 	.word	0xe000e3f0
 80053b4:	200003c8 	.word	0x200003c8
 80053b8:	e000ed0c 	.word	0xe000ed0c
 80053bc:	200003cc 	.word	0x200003cc

080053c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053cc:	f7ff f8f8 	bl	80045c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053d0:	4b57      	ldr	r3, [pc, #348]	; (8005530 <pvPortMalloc+0x170>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d8:	f000 f90c 	bl	80055f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053dc:	4b55      	ldr	r3, [pc, #340]	; (8005534 <pvPortMalloc+0x174>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 808c 	bne.w	8005502 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80053f0:	2208      	movs	r2, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4413      	add	r3, r2
 80053f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	3308      	adds	r3, #8
 800540a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <pvPortMalloc+0x6a>
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e7fe      	b.n	8005428 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d068      	beq.n	8005502 <pvPortMalloc+0x142>
 8005430:	4b41      	ldr	r3, [pc, #260]	; (8005538 <pvPortMalloc+0x178>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d863      	bhi.n	8005502 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800543a:	4b40      	ldr	r3, [pc, #256]	; (800553c <pvPortMalloc+0x17c>)
 800543c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800543e:	4b3f      	ldr	r3, [pc, #252]	; (800553c <pvPortMalloc+0x17c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005444:	e004      	b.n	8005450 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d903      	bls.n	8005462 <pvPortMalloc+0xa2>
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f1      	bne.n	8005446 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005462:	4b33      	ldr	r3, [pc, #204]	; (8005530 <pvPortMalloc+0x170>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	429a      	cmp	r2, r3
 800546a:	d04a      	beq.n	8005502 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2208      	movs	r2, #8
 8005472:	4413      	add	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	2308      	movs	r3, #8
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	429a      	cmp	r2, r3
 800548c:	d91e      	bls.n	80054cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <pvPortMalloc+0xf4>
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e7fe      	b.n	80054b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054c6:	69b8      	ldr	r0, [r7, #24]
 80054c8:	f000 f8f6 	bl	80056b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <pvPortMalloc+0x178>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <pvPortMalloc+0x178>)
 80054d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <pvPortMalloc+0x178>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <pvPortMalloc+0x180>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d203      	bcs.n	80054ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <pvPortMalloc+0x178>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <pvPortMalloc+0x180>)
 80054ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4b10      	ldr	r3, [pc, #64]	; (8005534 <pvPortMalloc+0x174>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005502:	f7ff f86b 	bl	80045dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <pvPortMalloc+0x164>
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e7fe      	b.n	8005522 <pvPortMalloc+0x162>
	return pvReturn;
 8005524:	69fb      	ldr	r3, [r7, #28]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3728      	adds	r7, #40	; 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20003fd8 	.word	0x20003fd8
 8005534:	20003fe4 	.word	0x20003fe4
 8005538:	20003fdc 	.word	0x20003fdc
 800553c:	20003fd0 	.word	0x20003fd0
 8005540:	20003fe0 	.word	0x20003fe0

08005544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d046      	beq.n	80055e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005556:	2308      	movs	r3, #8
 8005558:	425b      	negs	r3, r3
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4b20      	ldr	r3, [pc, #128]	; (80055ec <vPortFree+0xa8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <vPortFree+0x42>
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e7fe      	b.n	8005584 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <vPortFree+0x5e>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	e7fe      	b.n	80055a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <vPortFree+0xa8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d019      	beq.n	80055e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d115      	bne.n	80055e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <vPortFree+0xa8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055c8:	f7fe fffa 	bl	80045c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <vPortFree+0xac>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <vPortFree+0xac>)
 80055d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055da:	6938      	ldr	r0, [r7, #16]
 80055dc:	f000 f86c 	bl	80056b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055e0:	f7fe fffc 	bl	80045dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055e4:	bf00      	nop
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20003fe4 	.word	0x20003fe4
 80055f0:	20003fdc 	.word	0x20003fdc

080055f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005600:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <prvHeapInit+0xac>)
 8005602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3307      	adds	r3, #7
 8005612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <prvHeapInit+0xac>)
 8005624:	4413      	add	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <prvHeapInit+0xb0>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005632:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <prvHeapInit+0xb0>)
 8005634:	2200      	movs	r2, #0
 8005636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4413      	add	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005640:	2208      	movs	r2, #8
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0307 	bic.w	r3, r3, #7
 800564e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <prvHeapInit+0xb4>)
 8005654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <prvHeapInit+0xb4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <prvHeapInit+0xb4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <prvHeapInit+0xb4>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <prvHeapInit+0xb8>)
 8005682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <prvHeapInit+0xbc>)
 800568a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <prvHeapInit+0xc0>)
 800568e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	200003d0 	.word	0x200003d0
 80056a4:	20003fd0 	.word	0x20003fd0
 80056a8:	20003fd8 	.word	0x20003fd8
 80056ac:	20003fe0 	.word	0x20003fe0
 80056b0:	20003fdc 	.word	0x20003fdc
 80056b4:	20003fe4 	.word	0x20003fe4

080056b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056c0:	4b28      	ldr	r3, [pc, #160]	; (8005764 <prvInsertBlockIntoFreeList+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e002      	b.n	80056cc <prvInsertBlockIntoFreeList+0x14>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d8f7      	bhi.n	80056c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	4413      	add	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d108      	bne.n	80056fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d118      	bne.n	8005740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <prvInsertBlockIntoFreeList+0xb0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d00d      	beq.n	8005736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	441a      	add	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e008      	b.n	8005748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <prvInsertBlockIntoFreeList+0xb0>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e003      	b.n	8005748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d002      	beq.n	8005756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20003fd0 	.word	0x20003fd0
 8005768:	20003fd8 	.word	0x20003fd8

0800576c <__libc_init_array>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4e0d      	ldr	r6, [pc, #52]	; (80057a4 <__libc_init_array+0x38>)
 8005770:	4c0d      	ldr	r4, [pc, #52]	; (80057a8 <__libc_init_array+0x3c>)
 8005772:	1ba4      	subs	r4, r4, r6
 8005774:	10a4      	asrs	r4, r4, #2
 8005776:	2500      	movs	r5, #0
 8005778:	42a5      	cmp	r5, r4
 800577a:	d109      	bne.n	8005790 <__libc_init_array+0x24>
 800577c:	4e0b      	ldr	r6, [pc, #44]	; (80057ac <__libc_init_array+0x40>)
 800577e:	4c0c      	ldr	r4, [pc, #48]	; (80057b0 <__libc_init_array+0x44>)
 8005780:	f000 f854 	bl	800582c <_init>
 8005784:	1ba4      	subs	r4, r4, r6
 8005786:	10a4      	asrs	r4, r4, #2
 8005788:	2500      	movs	r5, #0
 800578a:	42a5      	cmp	r5, r4
 800578c:	d105      	bne.n	800579a <__libc_init_array+0x2e>
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005794:	4798      	blx	r3
 8005796:	3501      	adds	r5, #1
 8005798:	e7ee      	b.n	8005778 <__libc_init_array+0xc>
 800579a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800579e:	4798      	blx	r3
 80057a0:	3501      	adds	r5, #1
 80057a2:	e7f2      	b.n	800578a <__libc_init_array+0x1e>
 80057a4:	080058f8 	.word	0x080058f8
 80057a8:	080058f8 	.word	0x080058f8
 80057ac:	080058f8 	.word	0x080058f8
 80057b0:	080058fc 	.word	0x080058fc

080057b4 <memcmp>:
 80057b4:	b530      	push	{r4, r5, lr}
 80057b6:	2400      	movs	r4, #0
 80057b8:	42a2      	cmp	r2, r4
 80057ba:	d101      	bne.n	80057c0 <memcmp+0xc>
 80057bc:	2000      	movs	r0, #0
 80057be:	e007      	b.n	80057d0 <memcmp+0x1c>
 80057c0:	5d03      	ldrb	r3, [r0, r4]
 80057c2:	3401      	adds	r4, #1
 80057c4:	190d      	adds	r5, r1, r4
 80057c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80057ca:	42ab      	cmp	r3, r5
 80057cc:	d0f4      	beq.n	80057b8 <memcmp+0x4>
 80057ce:	1b58      	subs	r0, r3, r5
 80057d0:	bd30      	pop	{r4, r5, pc}

080057d2 <memcpy>:
 80057d2:	b510      	push	{r4, lr}
 80057d4:	1e43      	subs	r3, r0, #1
 80057d6:	440a      	add	r2, r1
 80057d8:	4291      	cmp	r1, r2
 80057da:	d100      	bne.n	80057de <memcpy+0xc>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e6:	e7f7      	b.n	80057d8 <memcpy+0x6>

080057e8 <memmove>:
 80057e8:	4288      	cmp	r0, r1
 80057ea:	b510      	push	{r4, lr}
 80057ec:	eb01 0302 	add.w	r3, r1, r2
 80057f0:	d807      	bhi.n	8005802 <memmove+0x1a>
 80057f2:	1e42      	subs	r2, r0, #1
 80057f4:	4299      	cmp	r1, r3
 80057f6:	d00a      	beq.n	800580e <memmove+0x26>
 80057f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005800:	e7f8      	b.n	80057f4 <memmove+0xc>
 8005802:	4283      	cmp	r3, r0
 8005804:	d9f5      	bls.n	80057f2 <memmove+0xa>
 8005806:	1881      	adds	r1, r0, r2
 8005808:	1ad2      	subs	r2, r2, r3
 800580a:	42d3      	cmn	r3, r2
 800580c:	d100      	bne.n	8005810 <memmove+0x28>
 800580e:	bd10      	pop	{r4, pc}
 8005810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005814:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005818:	e7f7      	b.n	800580a <memmove+0x22>

0800581a <memset>:
 800581a:	4402      	add	r2, r0
 800581c:	4603      	mov	r3, r0
 800581e:	4293      	cmp	r3, r2
 8005820:	d100      	bne.n	8005824 <memset+0xa>
 8005822:	4770      	bx	lr
 8005824:	f803 1b01 	strb.w	r1, [r3], #1
 8005828:	e7f9      	b.n	800581e <memset+0x4>
	...

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
